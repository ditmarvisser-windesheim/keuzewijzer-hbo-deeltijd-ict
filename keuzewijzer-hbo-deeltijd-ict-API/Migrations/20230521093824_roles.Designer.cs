// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230521093824_roles")]
    partial class roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortModule", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("ModulesId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("CohortModules", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            ModulesId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            ModulesId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            ModulesId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            ModulesId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            ModulesId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            ModulesId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            ModulesId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            ModulesId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Module 1",
                            Name = "Module 1",
                            Semester = 1,
                            Year = 2013
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Module 2",
                            Name = "Module 2",
                            Semester = 2,
                            Year = 2014
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Module 3",
                            Name = "Module 3",
                            Semester = 1,
                            Year = 2015
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Module 4",
                            Name = "Module 4",
                            Semester = 2,
                            Year = 2016
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Module 5",
                            Name = "Module 5",
                            Semester = 1,
                            Year = 2017
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Module 6",
                            Name = "Module 6",
                            Semester = 2,
                            Year = 2018
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Module 7",
                            Name = "Module 7",
                            Semester = 1,
                            Year = 2019
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Module 8",
                            Name = "Module 8",
                            Semester = 2,
                            Year = 2020
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description for Module 9",
                            Name = "Module 9",
                            Semester = 1,
                            Year = 2021
                        },
                        new
                        {
                            Id = 10,
                            Description = "Description for Module 10",
                            Name = "Module 10",
                            Semester = 2,
                            Year = 2022
                        },
                        new
                        {
                            Id = 11,
                            Description = "Description for Module 11",
                            Name = "Module 11",
                            Semester = 2,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studiebegeleider"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moduleverantwoordelijke"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModuleId = 1,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            ModuleId = 2,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            ModuleId = 3,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            ModuleId = 4,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 5,
                            ModuleId = 5,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 6,
                            ModuleId = 6,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            ModuleId = 7,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            ModuleId = 8,
                            Semester = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 9,
                            ModuleId = 9,
                            Semester = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            ModuleId = 10,
                            Semester = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1331449d-a245-4895-9a8f-41cea12eb761",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkAIlAT2IWVGh6lFhNRS37EnRiynNsvBSotnSPRYfoZcRwy+TC1TfMDI3X3vB983w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "831f6988-46e4-4ab0-9b91-158f77e3ce7d",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2LMi/6Z04aVrIsuBMfTjyI95q6h7uphJyDOFeGwzobKLbsade18CKExEiCnj8G/w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98498f63-aae9-4c4b-acd9-dfa38db9f3ae",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            PasswordHash = "AQAAAAEAACcQAAAAEOPi9VFImimyZFnWHEp9YTKgGtEg38kaER+jGPSx8rN+M7TdTleS3R0P+rLvCmcaHw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bb8fa11-5a86-405e-aa2e-014d914073b0",
                            Email = "cloekras@example.com",
                            EmailConfirmed = false,
                            FirstName = "Cloé",
                            LastName = "Kras",
                            LockoutEnabled = false,
                            Name = "Cloé Kras",
                            PasswordHash = "AQAAAAEAACcQAAAAEAhNCDiREVYr/XlpecAfyA6x6TezjtfhtQ+Jv+6BeDWli9bZ/CprAIBL16H0z1R6EA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "cloekras@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70cc50ab-8514-44c9-a206-14618230e21f",
                            Email = "maurivannuland@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mauri",
                            LastName = "Van Nuland",
                            LockoutEnabled = false,
                            Name = "Mauri Van Nuland",
                            PasswordHash = "AQAAAAEAACcQAAAAEMREVe+/vv58vsSYJJg05dap+F9wZanxSpFbfC4NGKvyR3NPZzj/i+hfDSBce7eLeQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maurivannuland@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c34ad1f-611e-4db4-a05a-236a4442eeee",
                            Email = "jeromeheerink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jerome",
                            LastName = "Heerink",
                            LockoutEnabled = false,
                            Name = "Jerome Heerink",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwBh3BX3MXgz366WNoDv34TGKW7i0FxR7rdt5lCFUyPjNYnN17SAcgkn0DghhN0LA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeromeheerink@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c12b9f5-bdf1-40f5-8f99-2a3d1173b90b",
                            Email = "semihvanburken@example.com",
                            EmailConfirmed = false,
                            FirstName = "Semih",
                            LastName = "Van Burken",
                            LockoutEnabled = false,
                            Name = "Semih Van Burken",
                            PasswordHash = "AQAAAAEAACcQAAAAEGf1+TzPaza/PrYsJ5oqNqgiVG7MzgVlAW6cUCpxXPvUpQaTGZ0k/qyR1FZi1to4eA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "semihvanburken@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d6799a3-e70a-42a7-b841-02f731ea9e2d",
                            Email = "jacomijntjemoraal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jacomijntje",
                            LastName = "Moraal",
                            LockoutEnabled = false,
                            Name = "Jacomijntje Moraal",
                            PasswordHash = "AQAAAAEAACcQAAAAECZtZWXb4a58TgUe5dtqLtHUCB7Eda1QCgPtoV0k+jGVdLRClh8XubUtQhE5mgj0OQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacomijntjemoraal@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c91b82e7-c382-46ce-893a-d7c3041903fc",
                            Email = "sjuulalma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sjuul",
                            LastName = "Alma",
                            LockoutEnabled = false,
                            Name = "Sjuul Alma",
                            PasswordHash = "AQAAAAEAACcQAAAAELyiQvIOvQd8YmtWdMKfoCbLObVl5gX2VV/Wgw5sGSANWwDCpISkLsEOAHz4pe/HTQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sjuulalma@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5780d19e-b7c9-4bb0-b3d7-a928096bb8ea",
                            Email = "sharonapouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sharona",
                            LastName = "Pouw",
                            LockoutEnabled = false,
                            Name = "Sharona Pouw",
                            PasswordHash = "AQAAAAEAACcQAAAAECM9aW2XiJg0Y3N6+LMj3wt2HupQX8aZRKptHeoARZ+zj8lJC15N2r1Xl0HgwYmoTA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sharonapouw@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3014cb6-f4a2-4be7-bb04-56c68c060a8f",
                            Email = "ashwienabbenhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ashwien",
                            LastName = "Abbenhuis",
                            LockoutEnabled = false,
                            Name = "Ashwien Abbenhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEJxvMPWoCMAZ2a9KMD0Jq9VCax4dmLuk2u63WLkTCuwfKxeT78q6W33Qfw5lHj/XTQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ashwienabbenhuis@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e218a238-30c6-4c49-b5eb-4ab6a9853c90",
                            Email = "raulverdaasdonk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raul",
                            LastName = "Verdaasdonk",
                            LockoutEnabled = false,
                            Name = "Raul Verdaasdonk",
                            PasswordHash = "AQAAAAEAACcQAAAAECSjnXc07qPCTemW+MYQ44ypemHPuzP9EhYIdGd1IBH1cAvpa7nK78elVKk5FBWO3w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raulverdaasdonk@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16e75836-3692-4db9-bc13-998d45f289b0",
                            Email = "majellawessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Majella",
                            LastName = "Wessels",
                            LockoutEnabled = false,
                            Name = "Majella Wessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJwkvP4sb0mzn652x8mqDBLnVIJnwIvUEC0q+O1cYPKTkitsklf97oSs2+/twWGlA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "majellawessels@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5f64469-c7a0-4cc4-a431-dcb659167666",
                            Email = "kwintlogtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kwint",
                            LastName = "Logtenberg",
                            LockoutEnabled = false,
                            Name = "Kwint Logtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEDeECrKMOfyPqH4AGBXriX+9+NuLgetqNArnXTTBMjVr/dKY4JKG3pI48mMrkcrtPg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kwintlogtenberg@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ad76197-452f-417f-87b7-0f115d3440ab",
                            Email = "mikhaillebbink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mikhail",
                            LastName = "Lebbink",
                            LockoutEnabled = false,
                            Name = "Mikhail Lebbink",
                            PasswordHash = "AQAAAAEAACcQAAAAEEIfSaPPPd+s8KvBKPlfuj3lOqCPlegWSkR0AtgXA/nt+/h3w138ILvO09Xwl1RD+A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikhaillebbink@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06ad62fa-d648-4a9d-a531-2e595df056e1",
                            Email = "claylier@example.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Lier",
                            LockoutEnabled = false,
                            Name = "Clay Lier",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlgLfKRCTPSYyoQQGHLvTWCq47ArV49d7ZTB16IoD3G/thk9DRiTfJa/i2Y6az8MQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "claylier@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d532b6ee-f210-438e-afb8-0983e81fb404",
                            Email = "rubinavanderhout@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rubina",
                            LastName = "Van der Hout",
                            LockoutEnabled = false,
                            Name = "Rubina Van der Hout",
                            PasswordHash = "AQAAAAEAACcQAAAAELj7u/mEOWWTY0DFKam3tbr2GP+6JuS6mtM1D8BzkkggX0mISwz5u/iSLCsQ5/I5yQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rubinavanderhout@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbabccac-af79-4eff-9be4-bf642d831356",
                            Email = "abderrazakblaauwbroek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Abderrazak",
                            LastName = "Blaauwbroek",
                            LockoutEnabled = false,
                            Name = "Abderrazak Blaauwbroek",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+Ut0Te646Xc3EUHFeHEobQzRIj6h61OxRsjwl0IJvnmuNO3qV0+TJJhuEq0mu03g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "abderrazakblaauwbroek@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91382690-fe53-41d2-9773-d3240c4f488c",
                            Email = "yannikconsten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yannik",
                            LastName = "Consten",
                            LockoutEnabled = false,
                            Name = "Yannik Consten",
                            PasswordHash = "AQAAAAEAACcQAAAAEGyO63/PqAWrV9xiySpYZHtdXSBmyjDPGa1Sn9iU3o+3nDIpi+mq4E673P/pm9xImQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yannikconsten@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eec1574-fed7-45ca-8136-b5b699cf02eb",
                            Email = "niniboekhoudt@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nini",
                            LastName = "Boekhoudt",
                            LockoutEnabled = false,
                            Name = "Nini Boekhoudt",
                            PasswordHash = "AQAAAAEAACcQAAAAEKlPdtBm6bJ++nvMvOJYZP39mltSkaGaqzkiSeO2Ws+lfhdr1m/fGaMOMOFyt4s4Og==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "niniboekhoudt@example.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9909513b-ab62-4c8b-8c54-ea7657ddea75",
                            Email = "mounssifborkent@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mounssif",
                            LastName = "Borkent",
                            LockoutEnabled = false,
                            Name = "Mounssif Borkent",
                            PasswordHash = "AQAAAAEAACcQAAAAECiZfXUOtPI72jhZ2y4P1sJyw39g0vAixVTbDSpCOGtj4lTfoDKeQwOgwhUeSNHQAA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mounssifborkent@example.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f02a5ac-38b4-4416-aff8-5ca8028859bd",
                            Email = "metjeknoef@example.com",
                            EmailConfirmed = false,
                            FirstName = "Metje",
                            LastName = "Knoef",
                            LockoutEnabled = false,
                            Name = "Metje Knoef",
                            PasswordHash = "AQAAAAEAACcQAAAAEHicEeQua88Sdf12x6ywoRGuH2+Cv9F2gBW8CFY2GbzmuHncmo+/yXcVYwz3DY3k1g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "metjeknoef@example.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7000b1fe-84df-48ee-ab3c-e741d3967ac3",
                            Email = "lolkjehagoort@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lolkje",
                            LastName = "Hagoort",
                            LockoutEnabled = false,
                            Name = "Lolkje Hagoort",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+aRApI3MVvMRpkE9YtQfj8NIKh7j0CRFGJgQrNxqxcQvlXACDnrvgeLBNLlGY9Gg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lolkjehagoort@example.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e623e24e-6d9a-415c-a859-dd25306209d6",
                            Email = "sabriadenissen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabria",
                            LastName = "Denissen",
                            LockoutEnabled = false,
                            Name = "Sabria Denissen",
                            PasswordHash = "AQAAAAEAACcQAAAAEGYeUq0+JhdMUY0HBdItuFsG0HceKTNiSy9On7HpQzxY0eLl4Pbba9gXQWRzAmxeLg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabriadenissen@example.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c23f0d2-571d-40e8-9e98-27ae07b46d57",
                            Email = "farukvanschip@example.com",
                            EmailConfirmed = false,
                            FirstName = "Faruk",
                            LastName = "Van Schip",
                            LockoutEnabled = false,
                            Name = "Faruk Van Schip",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQXZJQEWAfceq/l257CZK6a5ajbtIMd8wbPA1D8t3nfBKW+UcyJVWlS5IyhI2NHlA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "farukvanschip@example.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cc7a7e5-e6df-4ed1-a15b-f47d46609be7",
                            Email = "zakariadraaisma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Zakaria",
                            LastName = "Draaisma",
                            LockoutEnabled = false,
                            Name = "Zakaria Draaisma",
                            PasswordHash = "AQAAAAEAACcQAAAAEDJ6VQeAMKF4uzUCnsZcBCJ9JpUYMAkxXwKjjLdarn7jpSw53kt/QVIYNEPEAES1+w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "zakariadraaisma@example.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5ff1ca3-e5a4-4ab5-be14-d467320ff20b",
                            Email = "oguzheessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Oguz",
                            LastName = "Heessels",
                            LockoutEnabled = false,
                            Name = "Oguz Heessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVWM8q08Uh8UsVm+ewfWtbY5zyCAtM4R9YhsPPdAzqpeNNyzCXRQCISZ/mAVc6F/A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "oguzheessels@example.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "069091ca-da70-4eaf-a233-02d5afa496eb",
                            Email = "mariaburggraaff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Burggraaff",
                            LockoutEnabled = false,
                            Name = "Maria Burggraaff",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkZMguUN+mudzlnmOj+ENxCTkv5sLwFABkQdZzoeT/WKht0/3SzwCi6dUOggUOI1w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mariaburggraaff@example.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3924f6c-e549-49c6-996f-2aa6fc1258e0",
                            Email = "katelijnvandekoppel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Katelijn",
                            LastName = "Van de Koppel",
                            LockoutEnabled = false,
                            Name = "Katelijn Van de Koppel",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVnKtxHmEdd5wsj1QA/qUXPHHl5eAsEKp3tJ2RnjyYOhlPExkx2DXDc4VDDrBNHqQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "katelijnvandekoppel@example.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a30c2c6-9c06-4e8f-a2f9-b49554a08149",
                            Email = "desirescheeren@example.com",
                            EmailConfirmed = false,
                            FirstName = "Désiré",
                            LastName = "Scheeren",
                            LockoutEnabled = false,
                            Name = "Désiré Scheeren",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpN66QPxuoagqa/dA2EhbiBVnKRub2q1dxNfVzpskrPAJ+tf/Mo81ELowbJGNGxvw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "desirescheeren@example.com"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4b8ea17-4ed8-4b66-9439-bef0a3f11e15",
                            Email = "daxgabriel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Gabriel",
                            LockoutEnabled = false,
                            Name = "Dax Gabriel",
                            PasswordHash = "AQAAAAEAACcQAAAAEFvA6AtbMOFfDTL/pDlZp8aEA2/fRGzohTNavxi7sTGgeYO0BkBvK+dgPfrv2BoyHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "daxgabriel@example.com"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e608e17-dd43-419a-9f6b-8ef83bbded32",
                            Email = "tommiestel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tommie",
                            LastName = "Stel",
                            LockoutEnabled = false,
                            Name = "Tommie Stel",
                            PasswordHash = "AQAAAAEAACcQAAAAEP2NVoVJ+wrzRlMKhc/RSI+hDIXUDydQVBE4ZxzHMrLaeiRXIZehKNrmBFyJZEgTSA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tommiestel@example.com"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42f4e137-8f1e-4129-8fea-4ea434fdaceb",
                            Email = "raphaelkoppe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raphaël",
                            LastName = "Koppe",
                            LockoutEnabled = false,
                            Name = "Raphaël Koppe",
                            PasswordHash = "AQAAAAEAACcQAAAAEL52MxCjSYpJxuxwbFTxN8JJlJ+EL4DLy2Ta207KhCAEERPCDfGaaQFoZJnVVKMZfQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raphaelkoppe@example.com"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1510955-f3c3-4196-9c59-40676f271c9f",
                            Email = "demyjongen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Demy",
                            LastName = "Jongen",
                            LockoutEnabled = false,
                            Name = "Demy Jongen",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOi7UzFuxymMAz99PM3LWkv0fgPy+qBVQfP2gmtvtif04opfBZHzPb+fi9OQSZ5LA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demyjongen@example.com"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4afbe21-7578-4b4c-9177-1816f4cd6a19",
                            Email = "leahharreman@example.com",
                            EmailConfirmed = false,
                            FirstName = "Leah",
                            LastName = "Harreman",
                            LockoutEnabled = false,
                            Name = "Leah Harreman",
                            PasswordHash = "AQAAAAEAACcQAAAAECsTnQF1fW63wRaMFNtHh4nAlsLK9DYvyFNeYKuCn1YVH7f7h9LJRcaAsFy/wDdtyg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "leahharreman@example.com"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd2d8fa3-85c5-4842-8228-42b6531c3ca9",
                            Email = "idrisskorpershoek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Idriss",
                            LastName = "Korpershoek",
                            LockoutEnabled = false,
                            Name = "Idriss Korpershoek",
                            PasswordHash = "AQAAAAEAACcQAAAAEHrUJz6Y+CpGvAiZZule1UAhuYeSBgAlGSIHrhlTJEp3gm1SFGBt2Fj4PZFCE7p5Tw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "idrisskorpershoek@example.com"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b6ffb66-48df-4f5b-a9e8-73cf40fcd9db",
                            Email = "rashiedbleumink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rashied",
                            LastName = "Bleumink",
                            LockoutEnabled = false,
                            Name = "Rashied Bleumink",
                            PasswordHash = "AQAAAAEAACcQAAAAEMertx5we6uiRD7cFlaRZuIJMNxEetsYj/Fev6E/eBxsoKNWx1f7CTfx/JC5idOZnw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rashiedbleumink@example.com"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ec9ef9c-bfb1-4427-a518-d3bae909fd47",
                            Email = "siay@example.com",
                            EmailConfirmed = false,
                            FirstName = "Si",
                            LastName = "Ay",
                            LockoutEnabled = false,
                            Name = "Si Ay",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3h4StftL3fGvc/Aa1y4DdnqIC6vzo6jszSm+kAA+beSPcuXi8vgHFiwYh8xyGS5Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siay@example.com"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ac04022-f279-4961-810e-30510b973ae0",
                            Email = "manolyalebens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Manolya",
                            LastName = "Lebens",
                            LockoutEnabled = false,
                            Name = "Manolya Lebens",
                            PasswordHash = "AQAAAAEAACcQAAAAECKNDWS0BkiZF7f8ab8tNsXwjydbpIic5EJ32YY0zRsb3TAagSnkv1rshaEUNcdrYA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manolyalebens@example.com"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "074bb91e-87e8-444d-a055-0803e25aedd6",
                            Email = "mateuszmachielsen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Machielsen",
                            LockoutEnabled = false,
                            Name = "Mateusz Machielsen",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlOhZo88s7nfDpptMvjpifPfEANK0D4yq6jApfQREu9dhwAGE7LqalZCyEhHd50tw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mateuszmachielsen@example.com"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeaef25e-e9d0-4662-ae1b-e4091a318923",
                            Email = "douaavandepavert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Douaa",
                            LastName = "Van de Pavert",
                            LockoutEnabled = false,
                            Name = "Douaa Van de Pavert",
                            PasswordHash = "AQAAAAEAACcQAAAAEFL6j7yaTjLFCUcfP/0LEH5TLYByjjx3E7TzvHv0oseQHGx8G4JROqbGIlNWheD4Jg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "douaavandepavert@example.com"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbfeecd2-ccf0-408e-b51a-b0da37d359a9",
                            Email = "kishanhoogkamp@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kishan",
                            LastName = "Hoogkamp",
                            LockoutEnabled = false,
                            Name = "Kishan Hoogkamp",
                            PasswordHash = "AQAAAAEAACcQAAAAEMchTQVhR/wWMl4ApkydP3hB936vfZX18brX1QAzviRJ2RZicQ30HxssktpHq75QGg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kishanhoogkamp@example.com"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fefd45be-a167-408a-9a1c-2b008f058f0e",
                            Email = "harmjanversendaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Harmjan",
                            LastName = "Versendaal",
                            LockoutEnabled = false,
                            Name = "Harmjan Versendaal",
                            PasswordHash = "AQAAAAEAACcQAAAAELiZG58dVGzhv2TyaKB3fJnM6vC2F25Es3kYw571/GQ1DPJLJYFe4rNfiU1u0HQn9A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "harmjanversendaal@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModuleModule", b =>
                {
                    b.Property<int>("DependentModulesId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredModulesId")
                        .HasColumnType("int");

                    b.HasKey("DependentModulesId", "RequiredModulesId");

                    b.HasIndex("RequiredModulesId");

                    b.ToTable("ModuleRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentModulesId = 2,
                            RequiredModulesId = 1
                        },
                        new
                        {
                            DependentModulesId = 3,
                            RequiredModulesId = 2
                        },
                        new
                        {
                            DependentModulesId = 4,
                            RequiredModulesId = 3
                        },
                        new
                        {
                            DependentModulesId = 4,
                            RequiredModulesId = 1
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "4"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "5"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "6"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "7"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "8"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "9"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "10"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "11"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "12"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "13"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "14"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "15"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "16"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "17"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "18"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "19"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "20"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "21"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "22"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "23"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "24"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "25"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "26"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "27"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "28"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "29"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "30"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "31"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "32"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "33"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "34"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "35"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "36"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "37"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "38"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "39"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "40"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "41"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "42"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "43"
                        });
                });

            modelBuilder.Entity("CohortModule", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany()
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modules");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany()
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("Cohort");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleModule", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("DependentModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("RequiredModulesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
