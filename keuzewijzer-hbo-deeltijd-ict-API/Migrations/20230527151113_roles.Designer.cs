// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230527151113_roles")]
    partial class roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studiebegeleider"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moduleverantwoordelijke"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e2453d8-3466-41f1-b38e-1ef170559157",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKeKdA0mEUKiWMORSnPeAxosxtoF30CAOIYpmaRcONH99pQHp8uj6hfWRDPU/67Cg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0daa3cbd-b499-4842-8401-361735119855",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            PasswordHash = "AQAAAAEAACcQAAAAEHavCfajAhn/o4dE6rgZpo19MOuYQ2UBZ5yZIi1Ikz0t6JOpX69feiEa7ArTK8jGEw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8c61ef8-9c2a-4162-8da0-5c00751406a1",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzdE90p2afy4pqSSrXO0EXKjAFeGJEBya4a8oRD/pB5qZ4nRJM7uox6EMaHw54xwg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62fdab9b-c321-49f2-a244-0f5d462c89ba",
                            Email = "cloekras@example.com",
                            EmailConfirmed = false,
                            FirstName = "Cloé",
                            LastName = "Kras",
                            LockoutEnabled = false,
                            Name = "Cloé Kras",
                            PasswordHash = "AQAAAAEAACcQAAAAEOhXvRkaMiaDldqZpY2On6OwM4TaWblN5hs1zlV2DWfz5W528twi7t99YIg+UE3uZg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "cloekras@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cbd7f7-984a-4fb1-beef-000021c0df6b",
                            Email = "maurivannuland@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mauri",
                            LastName = "Van Nuland",
                            LockoutEnabled = false,
                            Name = "Mauri Van Nuland",
                            PasswordHash = "AQAAAAEAACcQAAAAECKL59ncPN4a+vE9lizEGffjY+vdkO7EEYM4p+yrdWfnj3Q4ZO5JLiscLbgbBaJ1sg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maurivannuland@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f826a3f5-2ebb-4917-9d85-fbd4db2e45ef",
                            Email = "jeromeheerink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jerome",
                            LastName = "Heerink",
                            LockoutEnabled = false,
                            Name = "Jerome Heerink",
                            PasswordHash = "AQAAAAEAACcQAAAAENp3Vm/CJcQAwDpBYIdxv0kP9jtHUL07vaSPkIaiV/CiObiTj9GX9ZHKmSaNv4pwhw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeromeheerink@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "034a3895-02a1-4c6e-b95b-d38e52afce9c",
                            Email = "semihvanburken@example.com",
                            EmailConfirmed = false,
                            FirstName = "Semih",
                            LastName = "Van Burken",
                            LockoutEnabled = false,
                            Name = "Semih Van Burken",
                            PasswordHash = "AQAAAAEAACcQAAAAEKlyEGP4oS9U5cII0pVpaeZz3vS+9d9Si8BGfw8+BRhXs8cAbPGOrg5Y33rUk0weGQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "semihvanburken@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12616f53-c77c-4148-94f9-abe9eff10519",
                            Email = "jacomijntjemoraal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jacomijntje",
                            LastName = "Moraal",
                            LockoutEnabled = false,
                            Name = "Jacomijntje Moraal",
                            PasswordHash = "AQAAAAEAACcQAAAAEFu78v79ps0dNn+h1kwB1B5Toji+SM7vZuzLsXq+1i7qGZZA+ZvxcV5c+PbUutweLA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacomijntjemoraal@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0b8dc16-712f-4dc8-b69e-68b20284222d",
                            Email = "sjuulalma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sjuul",
                            LastName = "Alma",
                            LockoutEnabled = false,
                            Name = "Sjuul Alma",
                            PasswordHash = "AQAAAAEAACcQAAAAEESOAnsp5+kBgum6tuiUVU+A8WG2OOQKswd3tDoMJ85pIWUQ0DASI7wiUmdumf5nNQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sjuulalma@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1257afad-b1bd-43ac-93df-7dee13ea0a7c",
                            Email = "sharonapouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sharona",
                            LastName = "Pouw",
                            LockoutEnabled = false,
                            Name = "Sharona Pouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+d27oZY5OW/jGhvU7ezz4PGYGSeBvTqYzucwp1N7EeRpkEKsV7t/ILEonzxhIREw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sharonapouw@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c8e2d38-e425-4a30-9b04-1f2ef138b479",
                            Email = "ashwienabbenhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ashwien",
                            LastName = "Abbenhuis",
                            LockoutEnabled = false,
                            Name = "Ashwien Abbenhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEFFZsl3o8EH5Qw+kNB3Ni21u6TDSW2hVZGxB2vmqlvFuMiK8eQXcG6wLeDihObtxjA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ashwienabbenhuis@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbccb16f-ab66-470c-82d0-03067d67b793",
                            Email = "raulverdaasdonk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raul",
                            LastName = "Verdaasdonk",
                            LockoutEnabled = false,
                            Name = "Raul Verdaasdonk",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9PQHPN7NiqUUN1Jw6AwdqGIuEdy+K7rb3youXchcLhGOWEoRXLKLw6xRNfDz77lw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raulverdaasdonk@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fb282d2-4a22-4dfa-9fba-db0244c184ba",
                            Email = "majellawessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Majella",
                            LastName = "Wessels",
                            LockoutEnabled = false,
                            Name = "Majella Wessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEFktZOaQ3Rr0I+7lbHaJgcJ4pUc4vhUXWGsLsNVLdUaL2lZ8WGeHbOnNp9DKzaSiYw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "majellawessels@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cfe2ad7-b52c-4f96-905d-9fa451c2cbfc",
                            Email = "kwintlogtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kwint",
                            LastName = "Logtenberg",
                            LockoutEnabled = false,
                            Name = "Kwint Logtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEKBw+ATeFmglgwbS+HtsM1d+es2tDGwS4R7A8bNToIfklQAuLZ9hc+YaeHcAWdIitQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kwintlogtenberg@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29b4c5af-eae2-41f3-ab67-5bcdb9d4d7bf",
                            Email = "mikhaillebbink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mikhail",
                            LastName = "Lebbink",
                            LockoutEnabled = false,
                            Name = "Mikhail Lebbink",
                            PasswordHash = "AQAAAAEAACcQAAAAEF6eJ4fn2nLgi3Bp7XDuVqu8dVSEbZSj5p55E0Y6G4MXF96WSYJatvNFvuno0HyDng==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikhaillebbink@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9fbf61c-69b2-46b7-90a9-6f7db149e73f",
                            Email = "claylier@example.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Lier",
                            LockoutEnabled = false,
                            Name = "Clay Lier",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdUnnfX571M2nrL79fcCgQIzbSdQZ7CQ0Rhf8cpqOiQZIby/kIUPjavdB4SRRImkg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "claylier@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43befe2d-de8a-4b5c-bf20-8e6d687abceb",
                            Email = "rubinavanderhout@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rubina",
                            LastName = "Van der Hout",
                            LockoutEnabled = false,
                            Name = "Rubina Van der Hout",
                            PasswordHash = "AQAAAAEAACcQAAAAEBj1ijvdDK4IilqteSt21jiMbFUB3I/mZkFRVXy5dhDJZnFxf88I9jaA7CziQe55ew==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rubinavanderhout@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f432805-ae02-4d98-9d36-d0e3fae24f0d",
                            Email = "abderrazakblaauwbroek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Abderrazak",
                            LastName = "Blaauwbroek",
                            LockoutEnabled = false,
                            Name = "Abderrazak Blaauwbroek",
                            PasswordHash = "AQAAAAEAACcQAAAAEOFCiFSVNbKipC13wlK9VBpKjW1W3d+WV+E307250LKnhkZZLOlTkODnI4g6DxVugA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "abderrazakblaauwbroek@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "775d7340-c4ef-4b3e-8e8a-110eefdedfc3",
                            Email = "yannikconsten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yannik",
                            LastName = "Consten",
                            LockoutEnabled = false,
                            Name = "Yannik Consten",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+3fRFZVsV8Wqhcotihqa7gZsAIkX0Etv2D8ALp1Nsx+OEvAuM1i9EtbwhHEuSJCw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yannikconsten@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e64e860-e468-43b5-8608-d3ae270b9659",
                            Email = "niniboekhoudt@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nini",
                            LastName = "Boekhoudt",
                            LockoutEnabled = false,
                            Name = "Nini Boekhoudt",
                            PasswordHash = "AQAAAAEAACcQAAAAEABMkHfAckAfXDPkHHUqSpcTVHrxQ/a9AP7HbUJMorm6lTGIold8gFpQd+mjOlR8FQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "niniboekhoudt@example.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6f76f72-dc4d-41d6-97a6-bdeca2645119",
                            Email = "mounssifborkent@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mounssif",
                            LastName = "Borkent",
                            LockoutEnabled = false,
                            Name = "Mounssif Borkent",
                            PasswordHash = "AQAAAAEAACcQAAAAEDw31HwghNqZl7wdCrh8x5g5guR/SkhnTNqXHqhouD7Rfkd9b2BgjkZADGDFDjZfrg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mounssifborkent@example.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "710eecef-67cf-4ed2-9ab8-990ef37f9e39",
                            Email = "metjeknoef@example.com",
                            EmailConfirmed = false,
                            FirstName = "Metje",
                            LastName = "Knoef",
                            LockoutEnabled = false,
                            Name = "Metje Knoef",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+XdPOfr64HGEDf6of9Gl7vR4MDLZiYHA0upfRHlD8hMLVAkXjQBc2RKDTxecSp3A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "metjeknoef@example.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7738c37-2b5e-4fcb-bf97-27115ae882ff",
                            Email = "lolkjehagoort@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lolkje",
                            LastName = "Hagoort",
                            LockoutEnabled = false,
                            Name = "Lolkje Hagoort",
                            PasswordHash = "AQAAAAEAACcQAAAAEIj4AzSHMiQRUwaKZnvBZKEdYwxALCQd6ImDehO9N3mLBBb1mlmHr7MLCiL/oVZUXQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lolkjehagoort@example.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f85d245e-db93-4ade-bb4a-150667d4a1d4",
                            Email = "sabriadenissen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabria",
                            LastName = "Denissen",
                            LockoutEnabled = false,
                            Name = "Sabria Denissen",
                            PasswordHash = "AQAAAAEAACcQAAAAEKH367R3G1os/vw5UFMG46M7neLP2zEDdC35/mJ6RyPF+Ir7mn2HhzOJdRq5BERWiw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabriadenissen@example.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e359c77-1d62-417d-a0fc-6b53e02e9485",
                            Email = "farukvanschip@example.com",
                            EmailConfirmed = false,
                            FirstName = "Faruk",
                            LastName = "Van Schip",
                            LockoutEnabled = false,
                            Name = "Faruk Van Schip",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZSAjpDP8W/0cD1u6u2MP3FUXxJ1LYx4FWDFpLOmSPAjRpf6ZD7DohLw8GdFmuq8A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "farukvanschip@example.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a63e875-2a5d-48a6-bec4-b98cf8c571dc",
                            Email = "zakariadraaisma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Zakaria",
                            LastName = "Draaisma",
                            LockoutEnabled = false,
                            Name = "Zakaria Draaisma",
                            PasswordHash = "AQAAAAEAACcQAAAAELzQKyluCPcXDD9KtIrkImXmtszXq89l1VhXLTHAoktCOs1QhIh8s/n+85sBdpOnKw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "zakariadraaisma@example.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e94e85c3-b881-42aa-90b8-61168cf10065",
                            Email = "oguzheessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Oguz",
                            LastName = "Heessels",
                            LockoutEnabled = false,
                            Name = "Oguz Heessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7QtkFQS4Hk94smByelEHMbncP1yELuyXm9g6XasN6ni5i4ACvvtspc/2CeoaCeCA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "oguzheessels@example.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee34b22e-c3f6-43bf-89ae-0147f2838bae",
                            Email = "mariaburggraaff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Burggraaff",
                            LockoutEnabled = false,
                            Name = "Maria Burggraaff",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbcvaVOKjmqcfZdOEzIWW1ucLhzwu4DX85ZViKlObDR62OskkWhsHu8oHxZsEdx6w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mariaburggraaff@example.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79059f28-e504-4bf0-9d3a-64bc0f1e2d49",
                            Email = "katelijnvandekoppel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Katelijn",
                            LastName = "Van de Koppel",
                            LockoutEnabled = false,
                            Name = "Katelijn Van de Koppel",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2UYdV0fO3H3BsbCQ4iM/QpUB8HeLo1hcsKle2hI7nksX9NH3gib/QAuhJk1z/HVw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "katelijnvandekoppel@example.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5b6c42d-9b83-4733-a422-460cce591e0b",
                            Email = "desirescheeren@example.com",
                            EmailConfirmed = false,
                            FirstName = "Désiré",
                            LastName = "Scheeren",
                            LockoutEnabled = false,
                            Name = "Désiré Scheeren",
                            PasswordHash = "AQAAAAEAACcQAAAAEOo3GO/Cd0JyCXeK9MCnPPsbSbi3vZhlCzOdh4t6R05oZfbL8a0p0GkfHxuZn8CvVg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "desirescheeren@example.com"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dbf6c60-30e9-4796-942e-0f1f7636c94c",
                            Email = "daxgabriel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Gabriel",
                            LockoutEnabled = false,
                            Name = "Dax Gabriel",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9CjACzT0ujKcHu7TYKx2f0nWWhs+NEhMnvth0ff60U80XEzJ548mSFfFEhz8GFtA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "daxgabriel@example.com"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3a9bd0e-86d9-4ada-b2da-b3b4b4e061db",
                            Email = "tommiestel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tommie",
                            LastName = "Stel",
                            LockoutEnabled = false,
                            Name = "Tommie Stel",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAHceV3uZraduwtH2EE04plLyI1Uyl3dqAikqTBIsJdtYocOle+a9zWWpBFCpXT0A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tommiestel@example.com"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c17a7a6d-66e4-466f-92a0-38ebb6bd19de",
                            Email = "raphaelkoppe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raphaël",
                            LastName = "Koppe",
                            LockoutEnabled = false,
                            Name = "Raphaël Koppe",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+5E1C1Xu2sv4GZwsfzZlJ2U5VMPpBBuWOvWY2ja6+7pkLlArCID2bt2IAd+zfIig==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raphaelkoppe@example.com"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504d497d-40f5-42c5-bae9-1f0d51badbd5",
                            Email = "demyjongen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Demy",
                            LastName = "Jongen",
                            LockoutEnabled = false,
                            Name = "Demy Jongen",
                            PasswordHash = "AQAAAAEAACcQAAAAECxmizeZtIzBsqsQd/P/P8F4M+gaKU9Mp4mya3bCdIP1dP+Gqyj40uwv3FkD8BVaFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demyjongen@example.com"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95019984-3134-44ba-a67c-8fdf8691c34f",
                            Email = "leahharreman@example.com",
                            EmailConfirmed = false,
                            FirstName = "Leah",
                            LastName = "Harreman",
                            LockoutEnabled = false,
                            Name = "Leah Harreman",
                            PasswordHash = "AQAAAAEAACcQAAAAEPKCa2vaOmC+YR2bVwMPIiVfJbAiLFZaIiA2yI2K2IHDqy448dx2t4XrzDzlYCf/kg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "leahharreman@example.com"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c0e378a-4613-4d42-b022-11ee65f036d1",
                            Email = "idrisskorpershoek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Idriss",
                            LastName = "Korpershoek",
                            LockoutEnabled = false,
                            Name = "Idriss Korpershoek",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7hrp96VbBThDjmgIozURsNG3MuOZYrua5WyuXYoANPnalpysDypvDw55yA1wLWsQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "idrisskorpershoek@example.com"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c93a939-e1a8-4485-ab66-f594465b25c2",
                            Email = "rashiedbleumink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rashied",
                            LastName = "Bleumink",
                            LockoutEnabled = false,
                            Name = "Rashied Bleumink",
                            PasswordHash = "AQAAAAEAACcQAAAAEEyXktpLpclT58HlaihPbnePdBHvIfHiJNiVGT/QLPplMRAF+YeFsf35zxjNCo2u2g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rashiedbleumink@example.com"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8af721d9-056e-40c3-8a9e-f7ca1c8135a6",
                            Email = "siay@example.com",
                            EmailConfirmed = false,
                            FirstName = "Si",
                            LastName = "Ay",
                            LockoutEnabled = false,
                            Name = "Si Ay",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdQhn6dYLCuuGKZsrBMnXw5s6X/9r/EgqOtrLEAPCZR28cceL5hnW6LfUnPytJNEw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siay@example.com"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0974564b-13ce-4be9-9ccd-c09da794710a",
                            Email = "manolyalebens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Manolya",
                            LastName = "Lebens",
                            LockoutEnabled = false,
                            Name = "Manolya Lebens",
                            PasswordHash = "AQAAAAEAACcQAAAAEIhkc5UjATDPz5yVQSpKnTKQ4x1x6M4l5ohHwLVXeegzu9f5I+AWDHg8DB2t/daHJg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manolyalebens@example.com"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7c443e9-d740-42c3-8a36-c2ec28067f0b",
                            Email = "mateuszmachielsen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Machielsen",
                            LockoutEnabled = false,
                            Name = "Mateusz Machielsen",
                            PasswordHash = "AQAAAAEAACcQAAAAENpaSk0edwTZ71roXppM7PRdzWNhxC+lAMm12y3tbi30OE+uzZ8wotnfc/poMUZr/A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mateuszmachielsen@example.com"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e10a5a3-4fdc-4c01-a4d9-af5d37633e6a",
                            Email = "douaavandepavert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Douaa",
                            LastName = "Van de Pavert",
                            LockoutEnabled = false,
                            Name = "Douaa Van de Pavert",
                            PasswordHash = "AQAAAAEAACcQAAAAEHw58CHVRBpUtXeHLfVzYKDW0esHcfsmaGiHJVpHHlQFyDddglrRal8A9fSQoBa6jw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "douaavandepavert@example.com"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84251fa0-d29a-4a67-ac9c-1f045844e5b2",
                            Email = "kishanhoogkamp@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kishan",
                            LastName = "Hoogkamp",
                            LockoutEnabled = false,
                            Name = "Kishan Hoogkamp",
                            PasswordHash = "AQAAAAEAACcQAAAAEMz7+qHD9lpDKXwNgoZy/pZ9XJRysoeUIW/KZDaMkwUXuC/Mvg7egQ0WMz2BXZHPgg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kishanhoogkamp@example.com"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e7b2bac-03b8-4188-91d9-7cb9823e38d9",
                            Email = "harmjanversendaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Harmjan",
                            LastName = "Versendaal",
                            LockoutEnabled = false,
                            Name = "Harmjan Versendaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVQAkORr39Vyw/eeMndyTq9fh2KoDQGjuscU8vJgYo2ToQhG0Bcf+6u/P4rF6GFCA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "harmjanversendaal@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "4"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "5"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "6"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "7"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "8"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "9"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "10"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "11"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "12"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "13"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "14"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "15"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "16"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "17"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "18"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "19"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "20"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "21"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "22"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "23"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "24"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "25"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "26"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "27"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "28"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "29"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "30"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "31"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "32"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "33"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "34"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "35"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "36"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "37"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "38"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "39"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "40"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "41"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "42"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "43"
                        });
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany()
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("Cohort");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });
#pragma warning restore 612, 618
        }
    }
}
