// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230531114014_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studiebegeleider"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moduleverantwoordelijke"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ad0257f-c101-4a91-a03e-38c8f4aec201",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            PasswordHash = "AQAAAAEAACcQAAAAEGeZhDlAbhcdgw5GultAT9scMk9uY79w3eWlAYeqVVUT+wpHquBlluCDQClxGIgBtg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fc673d1-eff4-450d-b270-e99ab52751d2",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            PasswordHash = "AQAAAAEAACcQAAAAELY9Zed3pR4krk576n1VsdkAIrRZr3s6J1a6CPR36p7yvWHIeMqIMW9VWg8UEfUukA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fb2d1eb-b06e-4a02-ae86-5032fd9e334e",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            PasswordHash = "AQAAAAEAACcQAAAAENareyxKJ8SoYG+RagrOOZW97skzns5w0oNwTLLZOy/lq5gZSc9Z2+ENn59OfgFo5w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40600586-ec40-4bce-9d34-bd5ef20b869b",
                            Email = "cloekras@example.com",
                            EmailConfirmed = false,
                            FirstName = "Cloé",
                            LastName = "Kras",
                            LockoutEnabled = false,
                            Name = "Cloé Kras",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtZjVkMxdcTt5tlCMy/McHoldnGqSKk39sIbWao56Z9UwReszoIqEdv+keenYWlAw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "cloekras@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c8e2bc4-3a0b-4971-9988-d3b582608d92",
                            Email = "maurivannuland@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mauri",
                            LastName = "Van Nuland",
                            LockoutEnabled = false,
                            Name = "Mauri Van Nuland",
                            PasswordHash = "AQAAAAEAACcQAAAAEE11cENu6PmDpZ1AAWnUfq5jnxrbtdv8P/4msDQ9kDbkkR3rF5G+SFHPESXM7bk0+w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maurivannuland@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3375715-f2b3-43ec-a555-2b8d79ad75bd",
                            Email = "jeromeheerink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jerome",
                            LastName = "Heerink",
                            LockoutEnabled = false,
                            Name = "Jerome Heerink",
                            PasswordHash = "AQAAAAEAACcQAAAAECQGbYSrrdFtuHGk/CoktpSbJQvlq6AX7qd+oeZXPkN2m6JnzwsV7Cxa6EbgX73DKA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeromeheerink@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efed9382-ad95-4799-b612-6552eb55e240",
                            Email = "semihvanburken@example.com",
                            EmailConfirmed = false,
                            FirstName = "Semih",
                            LastName = "Van Burken",
                            LockoutEnabled = false,
                            Name = "Semih Van Burken",
                            PasswordHash = "AQAAAAEAACcQAAAAELCWuZwG1ys1Iv+SB/6mHNHmuxjODXrKnI27Rbvtl3dDdhr5FmkHds1zc2MxPhX4QQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "semihvanburken@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfb1aa71-e336-4249-8845-5e6cda3e11d7",
                            Email = "jacomijntjemoraal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jacomijntje",
                            LastName = "Moraal",
                            LockoutEnabled = false,
                            Name = "Jacomijntje Moraal",
                            PasswordHash = "AQAAAAEAACcQAAAAELxzs4OyXuMH7D+p8YRN9zEMOyBpOolQhJ8Hz6NCBE/V18n//c8TOhK31lL1yhcU3Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacomijntjemoraal@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44c1ae38-7c7c-4ed6-8307-e751e18d0e8f",
                            Email = "sjuulalma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sjuul",
                            LastName = "Alma",
                            LockoutEnabled = false,
                            Name = "Sjuul Alma",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1gn76XvU8j/DXIMyge04zk68PMoyPbW3rooD8uXEoM3X+xGlPHWB/R0GAQmX52cg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sjuulalma@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1784103d-fd50-4341-9359-9783c850872d",
                            Email = "sharonapouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sharona",
                            LastName = "Pouw",
                            LockoutEnabled = false,
                            Name = "Sharona Pouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoyKOous3OFOT7u8w+J+0Q+LcoLv6W3mB3JnhpBkFeVHeAMwq+nRI9MfkxDgCui4Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sharonapouw@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bec9d79-5024-4311-9215-8472ee58d110",
                            Email = "ashwienabbenhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ashwien",
                            LastName = "Abbenhuis",
                            LockoutEnabled = false,
                            Name = "Ashwien Abbenhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2YGt3cQg/xa2RlMZH9oPYTvP+C1dOMWMnjrSSegPt72TH8DuA5BPfuMgOjd/UOzQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ashwienabbenhuis@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12396af2-d2cc-4cca-acba-6e3e6088114c",
                            Email = "raulverdaasdonk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raul",
                            LastName = "Verdaasdonk",
                            LockoutEnabled = false,
                            Name = "Raul Verdaasdonk",
                            PasswordHash = "AQAAAAEAACcQAAAAELr7k8eIIQi8mvAhh5H4kECVED/a7XmBX039DyN/7tF3GYi8WPxqs54voMYorvlDPA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raulverdaasdonk@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b3b1a32-c524-4b39-8f5c-34fd9cfa2026",
                            Email = "majellawessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Majella",
                            LastName = "Wessels",
                            LockoutEnabled = false,
                            Name = "Majella Wessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBOgN/VARTrUJknr4D5hSdx23eZ/Bs1RerE1R0JTVx/30wX6HH/1mz5sK19ivHsOw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "majellawessels@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "697ab588-0110-4914-9d03-0ab827ea2f53",
                            Email = "kwintlogtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kwint",
                            LastName = "Logtenberg",
                            LockoutEnabled = false,
                            Name = "Kwint Logtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSiUf/V5XORXHQRbohsVQAzgGNGabbEPEp4BZawudld3mUGHMjzbDC5VqGwtlE63A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kwintlogtenberg@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c74f3a5d-dcbe-413c-959c-8095dc355feb",
                            Email = "mikhaillebbink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mikhail",
                            LastName = "Lebbink",
                            LockoutEnabled = false,
                            Name = "Mikhail Lebbink",
                            PasswordHash = "AQAAAAEAACcQAAAAEHGhhht+6ae4rbbZNwc8apPlGNS1eU0eRx8HWFeYWD9GwRqpH1nPMpdKHV67Dv0HIQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikhaillebbink@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2dd4ba0-5aea-42b6-8815-5f165fee502c",
                            Email = "claylier@example.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Lier",
                            LockoutEnabled = false,
                            Name = "Clay Lier",
                            PasswordHash = "AQAAAAEAACcQAAAAEGvbnwLpP6X0S4EQCGTrMwCjnEcy5MxT8XCn+TBiM+b156axksJUj/U+XCHskDh1Aw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "claylier@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69275918-1652-4456-bc3f-cd0a4ab16198",
                            Email = "rubinavanderhout@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rubina",
                            LastName = "Van der Hout",
                            LockoutEnabled = false,
                            Name = "Rubina Van der Hout",
                            PasswordHash = "AQAAAAEAACcQAAAAEIiggoElNqOCod79uDBrz0XTqF+fAjDLUOpJjo+CA9TrUcljcO/IsBMp4sIsQAasYA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rubinavanderhout@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f02fc34-be97-4156-b182-b83b5cd40802",
                            Email = "abderrazakblaauwbroek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Abderrazak",
                            LastName = "Blaauwbroek",
                            LockoutEnabled = false,
                            Name = "Abderrazak Blaauwbroek",
                            PasswordHash = "AQAAAAEAACcQAAAAEE/Q1yepV2EDBJlqw5ftf8QywvLp7E+lfGThIfCE1T7aw6orFi2NaVeBHmTZ/TGjKQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "abderrazakblaauwbroek@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76cf2737-1b6f-4b6b-b7d6-28199d2b6098",
                            Email = "yannikconsten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yannik",
                            LastName = "Consten",
                            LockoutEnabled = false,
                            Name = "Yannik Consten",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6sGw8w9/9gOgvmRiIYDV318w4mbwE7RjqI/WUZEh2ZJsXt2ZyyD+4x/JcF3/P5VA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yannikconsten@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00d7f750-d5c6-45f0-8d9b-c39e45411872",
                            Email = "niniboekhoudt@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nini",
                            LastName = "Boekhoudt",
                            LockoutEnabled = false,
                            Name = "Nini Boekhoudt",
                            PasswordHash = "AQAAAAEAACcQAAAAEEhHel+xJMQVaWReXgEGm2yZG+L7ooUyOwHwZLmy3UQU7N3i+YCh8+CaZBfot4v5CQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "niniboekhoudt@example.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28892a0d-f30e-44b1-a4f9-be7889820859",
                            Email = "mounssifborkent@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mounssif",
                            LastName = "Borkent",
                            LockoutEnabled = false,
                            Name = "Mounssif Borkent",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNDfCWHZNpyuVCbBOREU2CDl85hveNxq7FQnYOxt/Mxgca2MR+qs1/vPGXJ4pbsNw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mounssifborkent@example.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c9898e7-cd5a-4c92-b219-2be7f7aa9fe6",
                            Email = "metjeknoef@example.com",
                            EmailConfirmed = false,
                            FirstName = "Metje",
                            LastName = "Knoef",
                            LockoutEnabled = false,
                            Name = "Metje Knoef",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7Gev6Dk1ajfidHYyOX5xr0BDcAhb3xbUKMVXtjIAHwwottdOqKUcbsF17GCQEKPQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "metjeknoef@example.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac0f8b6d-874b-4c66-9714-1b8e6fd35031",
                            Email = "lolkjehagoort@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lolkje",
                            LastName = "Hagoort",
                            LockoutEnabled = false,
                            Name = "Lolkje Hagoort",
                            PasswordHash = "AQAAAAEAACcQAAAAEClHkirWIocKm4xcynhbL4ellFh97n2uGh+hiVywy90pkXvVk0eAurBpgMYRgETgyw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lolkjehagoort@example.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cadf381d-64cb-4307-8b7f-81f1f92acf53",
                            Email = "sabriadenissen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabria",
                            LastName = "Denissen",
                            LockoutEnabled = false,
                            Name = "Sabria Denissen",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9dV/ALsVjAktOwlkkHlZ1reG7ApbPqwGHbhb29DLI368YALMogvILWbFQHnAODMQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabriadenissen@example.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2731b313-0371-4395-b22a-1433e23089cf",
                            Email = "farukvanschip@example.com",
                            EmailConfirmed = false,
                            FirstName = "Faruk",
                            LastName = "Van Schip",
                            LockoutEnabled = false,
                            Name = "Faruk Van Schip",
                            PasswordHash = "AQAAAAEAACcQAAAAEHnMBOS2CWOTL7k/bDczwBU2bHMVWJYBDK5B9i4qWY/OxyWYg/ilRE/tKqp/jiWyug==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "farukvanschip@example.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c20d9966-04f6-4d0a-b940-45bd74a6c52b",
                            Email = "zakariadraaisma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Zakaria",
                            LastName = "Draaisma",
                            LockoutEnabled = false,
                            Name = "Zakaria Draaisma",
                            PasswordHash = "AQAAAAEAACcQAAAAEDSsPG5tQURHdziSejxRErLliPgGU2uNs2tAPpOgkXfQgN0xtgtMha4rWLCb4rqsMg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "zakariadraaisma@example.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29929c51-cc16-4f40-82eb-3bbf682347e7",
                            Email = "oguzheessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Oguz",
                            LastName = "Heessels",
                            LockoutEnabled = false,
                            Name = "Oguz Heessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXzgiQg+R6seYw6ouZEjqdj0f4W5Lx2OE3EaJ6dsWe9SatnIC++Ye0paorRnRwzAA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "oguzheessels@example.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8121206b-19c0-484d-b2c2-b53285bad16b",
                            Email = "mariaburggraaff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Burggraaff",
                            LockoutEnabled = false,
                            Name = "Maria Burggraaff",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnBG++goHo6STfIdBA6ESBTScWSCpIDJZFPhTA9RhMgxS5rz6FFVB88GsGf92MbFg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mariaburggraaff@example.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d5d040a-5f98-4b39-9546-59673d3f24cb",
                            Email = "katelijnvandekoppel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Katelijn",
                            LastName = "Van de Koppel",
                            LockoutEnabled = false,
                            Name = "Katelijn Van de Koppel",
                            PasswordHash = "AQAAAAEAACcQAAAAEDY1qSA2Px3/Bqz3OniazqYJvP3afuQL2ii/87LC0+QvoKLTKFhNPz6qQ/+nZ0NCjg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "katelijnvandekoppel@example.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f45f21ad-0d21-454e-a261-e4a3e0218d06",
                            Email = "desirescheeren@example.com",
                            EmailConfirmed = false,
                            FirstName = "Désiré",
                            LastName = "Scheeren",
                            LockoutEnabled = false,
                            Name = "Désiré Scheeren",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVznLVtvoSryHiyv8XvAJt3hYoCBz1apH6+viAm7itm9gi2EIQjGy+TV72rAqRaKA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "desirescheeren@example.com"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4898afa-1250-4367-885a-e70deeff197a",
                            Email = "daxgabriel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Gabriel",
                            LockoutEnabled = false,
                            Name = "Dax Gabriel",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjuT3TmYJf5KM6r+tyT0ENBfEa44BgSAZT7R29NB8uRWGA1imn1G6QKW9N3C5jr/g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "daxgabriel@example.com"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3887b870-7923-450d-b651-e70fb2e9d80b",
                            Email = "tommiestel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tommie",
                            LastName = "Stel",
                            LockoutEnabled = false,
                            Name = "Tommie Stel",
                            PasswordHash = "AQAAAAEAACcQAAAAEAJVRnjR6SpGfv4oBE07yijEb/8SgDf1iKqyItDX5a/BR3VSOL8leXO8x8B41+oplA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tommiestel@example.com"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "416b5ea2-4463-4d32-b490-9fb7b5fc419e",
                            Email = "raphaelkoppe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raphaël",
                            LastName = "Koppe",
                            LockoutEnabled = false,
                            Name = "Raphaël Koppe",
                            PasswordHash = "AQAAAAEAACcQAAAAEAXV4Ve6cs6nXS07Ld1dVtoBjYZ3Ai69bNrzZlQnyAIzoetjbHwYBSi0By4VxSPBlQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raphaelkoppe@example.com"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2de1ab60-c03e-4a2a-8d7a-8bba8ecc381a",
                            Email = "demyjongen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Demy",
                            LastName = "Jongen",
                            LockoutEnabled = false,
                            Name = "Demy Jongen",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVVQc7Rbst5w5Xq3KVJXY6W8DJ7pY2gbbc1LeNZmUESl+sOFZz/5CTdmz9STo62VA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demyjongen@example.com"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a61743ce-3a20-4223-bcce-119f0667c41a",
                            Email = "leahharreman@example.com",
                            EmailConfirmed = false,
                            FirstName = "Leah",
                            LastName = "Harreman",
                            LockoutEnabled = false,
                            Name = "Leah Harreman",
                            PasswordHash = "AQAAAAEAACcQAAAAEFjn7CWIhkOe5FTPDvHpA7yceEQ9KG0Ju9kah/SC/oBrU4DXc9QEDkutU+F1KjF9Hw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "leahharreman@example.com"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa7b82fd-5c5b-4292-b495-edc60b1725e2",
                            Email = "idrisskorpershoek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Idriss",
                            LastName = "Korpershoek",
                            LockoutEnabled = false,
                            Name = "Idriss Korpershoek",
                            PasswordHash = "AQAAAAEAACcQAAAAEAWMHRwHgDc7cwrGuCd6idlHqltvf5mLGGTGk8r3EEZ+wSScw27naKLzkl2U2Oxyzg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "idrisskorpershoek@example.com"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "705a5423-ad55-4f5a-88b3-f4a3033e1436",
                            Email = "rashiedbleumink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rashied",
                            LastName = "Bleumink",
                            LockoutEnabled = false,
                            Name = "Rashied Bleumink",
                            PasswordHash = "AQAAAAEAACcQAAAAED+cE4T7vRW1BOp1EXYAjz5fjmN2xd9eW6SLSEgC4Hcvr1LoKmmdlDE/SZjuvNxF9A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rashiedbleumink@example.com"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10649cc7-6ae5-496d-a47e-cbcef62bedea",
                            Email = "siay@example.com",
                            EmailConfirmed = false,
                            FirstName = "Si",
                            LastName = "Ay",
                            LockoutEnabled = false,
                            Name = "Si Ay",
                            PasswordHash = "AQAAAAEAACcQAAAAECydV1JJ5OcnIKpBbqH3WlVaGJCiA171ctfJEBluflaiTqZiateSSZeDoSMWYiGNnQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siay@example.com"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f30ee01f-7cc9-4bd4-89f9-bab146640d82",
                            Email = "manolyalebens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Manolya",
                            LastName = "Lebens",
                            LockoutEnabled = false,
                            Name = "Manolya Lebens",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7tNRut3EJvrj7xEysLhupFDKIQO5ePflFIG/9uACd8sCtK3czlcGkFJM939qGUhg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manolyalebens@example.com"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d018a0c-9b7c-4fae-a353-eef64698214b",
                            Email = "mateuszmachielsen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Machielsen",
                            LockoutEnabled = false,
                            Name = "Mateusz Machielsen",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPMT96cyyoiBgdGTz35CDRPs/czL+jHBMJzRbxomHKsr0FDelRUJdWsthqH7UEdIA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mateuszmachielsen@example.com"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f8cc0db-6d95-4060-9b87-cdbf941204db",
                            Email = "douaavandepavert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Douaa",
                            LastName = "Van de Pavert",
                            LockoutEnabled = false,
                            Name = "Douaa Van de Pavert",
                            PasswordHash = "AQAAAAEAACcQAAAAEAgu49CIVkpP8UzhJeFq/fv/MtVkE/DMlVBDj7zNQ+HB7iWoBufjujzyT6eD7NNvxg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "douaavandepavert@example.com"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6455860e-4a44-403f-ba2c-0cc6c36f42ba",
                            Email = "kishanhoogkamp@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kishan",
                            LastName = "Hoogkamp",
                            LockoutEnabled = false,
                            Name = "Kishan Hoogkamp",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6dU43XG1oy6pAOmMcUG2J1c6Qf52pT7RMEsqZY6j0B7jWVt9E1Y7v7UWlyLs2RXg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kishanhoogkamp@example.com"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a50a45bf-bf5e-4e61-a7e2-2094e53fdb7d",
                            Email = "harmjanversendaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Harmjan",
                            LastName = "Versendaal",
                            LockoutEnabled = false,
                            Name = "Harmjan Versendaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0SBxSAX6jOC+zThojwol6hSzrKnZuNa2DBzGo2wgm0gZEDcszH5EGKfW4cHmHARQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "harmjanversendaal@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "4"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "5"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "6"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "7"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "8"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "9"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "10"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "11"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "12"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "13"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "14"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "15"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "16"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "17"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "18"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "19"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "20"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "21"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "22"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "23"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "24"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "25"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "26"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "27"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "28"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "29"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "30"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "31"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "32"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "33"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "34"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "35"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "36"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "37"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "38"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "39"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "40"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "41"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "42"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "43"
                        });
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany()
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("Cohort");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });
#pragma warning restore 612, 618
        }
    }
}
