// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230604134757_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83992dc6-c5e7-4523-8c6c-3ac16f044d43",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            NormalizedEmail = "admin@example.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAECpe6Hny7GsRUiyjwioCdZg6wQ6J1H6JNREgr5Ewtqu8UVnyNgCiac8NEIy2QbQGEA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2d63f00-0faa-496f-99d3-98652dea271c",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            NormalizedEmail = "eugenevanroden@example.com",
                            NormalizedUserName = "eugenevanroden",
                            PasswordHash = "AQAAAAEAACcQAAAAELTwvRrOnZltegvGPEbVXXsGIrQLpMyfeZEezs4h0q5HtPshZTg8LSEXXSDFKQNT0A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f4cd6c9-851a-4690-b2bd-7444a8a8858e",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            NormalizedEmail = "theotan@example.com",
                            NormalizedUserName = "theotan",
                            PasswordHash = "AQAAAAEAACcQAAAAEA9jgMNL3Ez8p8deNWs/oNXBKHu4TXm/iz8cxf+Z7yXL5BG9vaZu2Yb0sTmW/LvlMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "927a38af-7f5f-4ef7-aba7-b8beb35e4b3a",
                            Email = "floruscicek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Florus",
                            LastName = "Çiçek",
                            LockoutEnabled = false,
                            Name = "Florus Çiçek",
                            NormalizedEmail = "floruscicek@example.com",
                            NormalizedUserName = "floruscicek",
                            PasswordHash = "AQAAAAEAACcQAAAAEPU+/d00uRsxnTUx61pLtcnUrN87nkapJ+m3L06zYyt1/VyvDEs3nOJij7mSk/vzgA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "floruscicek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36bd2dec-7cbc-4fa9-9323-7566d44af25d",
                            Email = "marlenewolf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlène",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            Name = "Marlène Wolf",
                            NormalizedEmail = "marlenewolf@example.com",
                            NormalizedUserName = "marlenewolf",
                            PasswordHash = "AQAAAAEAACcQAAAAEHLldOMLl74bhGYTD9TeHwN+bteoaYkPQIj5Xf6IyssCVBce40zzLRZj/0LaXijK0w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlenewolf"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c8e8e52-f4d8-4de5-adc3-2ef0d6b8bad5",
                            Email = "bilalsteentjes@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bilal",
                            LastName = "Steentjes",
                            LockoutEnabled = false,
                            Name = "Bilal Steentjes",
                            NormalizedEmail = "bilalsteentjes@example.com",
                            NormalizedUserName = "bilalsteentjes",
                            PasswordHash = "AQAAAAEAACcQAAAAEMoTQo8bNIQ2E4g+fdJmrOYSv9aOOD+xNnaJzpZbqtjSFfHJHsbZreU+V3MNKecovQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bilalsteentjes"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ee6e37c-da75-4279-b052-f162d80c259e",
                            Email = "marlijngiebels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlijn",
                            LastName = "Giebels",
                            LockoutEnabled = false,
                            Name = "Marlijn Giebels",
                            NormalizedEmail = "marlijngiebels@example.com",
                            NormalizedUserName = "marlijngiebels",
                            PasswordHash = "AQAAAAEAACcQAAAAEAyZjdZcbEnKhcUgUH+PI0y6CTdsplysFhwKZxHJUAY2LE/0Cs0tlnnxf84HTKzWSg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlijngiebels"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a59ac976-334c-47e3-b54c-e7ee50bbcd9f",
                            Email = "sabrivandereijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabri",
                            LastName = "Van der Eijk",
                            LockoutEnabled = false,
                            Name = "Sabri Van der Eijk",
                            NormalizedEmail = "sabrivandereijk@example.com",
                            NormalizedUserName = "sabrivandereijk",
                            PasswordHash = "AQAAAAEAACcQAAAAENzD3Ah5CEM7b0mYM0UXVVDZLqfA5WmAROHNTCqvlmort4LVQaKwL9RxCRwsFtoCLg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabrivandereijk"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a937fd5-e552-41d5-8582-366483f389ac",
                            Email = "caseyandriesse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Casey",
                            LastName = "Andriesse",
                            LockoutEnabled = false,
                            Name = "Casey Andriesse",
                            NormalizedEmail = "caseyandriesse@example.com",
                            NormalizedUserName = "caseyandriesse",
                            PasswordHash = "AQAAAAEAACcQAAAAEHCskOtp8wwzJObTnab/B/1nix1NvVaBVykSsdgNjaprpKdeXbEaucSw/c4nJC67Xg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caseyandriesse"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9489b286-28f9-41f4-a254-f55bcc44b4ce",
                            Email = "nikhuijskens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LastName = "Huijskens",
                            LockoutEnabled = false,
                            Name = "Nik Huijskens",
                            NormalizedEmail = "nikhuijskens@example.com",
                            NormalizedUserName = "nikhuijskens",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUVsXwfr6M/qa1hHAxRJnoxXf6/6JVmDZHLecP9B3iz4qxxeJ/h0jxHNtxxJKrpOw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nikhuijskens"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8174ab65-db68-46ca-a284-70163a973f13",
                            Email = "duranpetiet@example.com",
                            EmailConfirmed = false,
                            FirstName = "Duran",
                            LastName = "Petiet",
                            LockoutEnabled = false,
                            Name = "Duran Petiet",
                            NormalizedEmail = "duranpetiet@example.com",
                            NormalizedUserName = "duranpetiet",
                            PasswordHash = "AQAAAAEAACcQAAAAED6tja5jwXRNHN2ozA9901drk3KSwJ3PtoqpXJLzLB2Cbe8WaRG7DQ3EUwCsinGS7Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "duranpetiet"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3a014d8-5e87-4c28-ad15-2ef0235e9215",
                            Email = "veroniekbravenboer@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veroniek",
                            LastName = "Bravenboer",
                            LockoutEnabled = false,
                            Name = "Veroniek Bravenboer",
                            NormalizedEmail = "veroniekbravenboer@example.com",
                            NormalizedUserName = "veroniekbravenboer",
                            PasswordHash = "AQAAAAEAACcQAAAAEGio1mIhcRcDbfx2JmOYL+wPI59NqxiuNTvngFTeInvgRjrkppL5rsQvP8u4Tok8rQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "veroniekbravenboer"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db28316b-c522-4613-8a60-eb8752f4c771",
                            Email = "kaynejagtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kayne",
                            LastName = "Jagtenberg",
                            LockoutEnabled = false,
                            Name = "Kayne Jagtenberg",
                            NormalizedEmail = "kaynejagtenberg@example.com",
                            NormalizedUserName = "kaynejagtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEDgBjcAEO6qs17S+2iZp/Cdu6PV7h0dlnbi+y4Uo4gASiHR1V78oOoX1WQDcL24HMA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaynejagtenberg"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56b8eedf-86d2-468b-9493-0694e08db20f",
                            Email = "siebrigjeabdi@example.com",
                            EmailConfirmed = false,
                            FirstName = "Siebrigje",
                            LastName = "Abdi",
                            LockoutEnabled = false,
                            Name = "Siebrigje Abdi",
                            NormalizedEmail = "siebrigjeabdi@example.com",
                            NormalizedUserName = "siebrigjeabdi",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYSgHS2p3cD4t3BRETgzVKwnXP73yRSrqeNkHgqJiAhTIRer6TN+3Fk60F/3pfz7Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siebrigjeabdi"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf10e596-d6b4-48d3-96ee-6ef6d21e1bf6",
                            Email = "sterrelambert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sterre",
                            LastName = "Lambert",
                            LockoutEnabled = false,
                            Name = "Sterre Lambert",
                            NormalizedEmail = "sterrelambert@example.com",
                            NormalizedUserName = "sterrelambert",
                            PasswordHash = "AQAAAAEAACcQAAAAELQLwakIrDW+pZ3kmxjBfCYhf2s3C6E4rrLTpN2qB6fxMVRDbqt+aTA/OEx1uMqnwg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sterrelambert"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d8f49b-6f8f-4254-bf7d-5df3c5ba3022",
                            Email = "milicavandergouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            LastName = "Van der Gouw",
                            LockoutEnabled = false,
                            Name = "Milica Van der Gouw",
                            NormalizedEmail = "milicavandergouw@example.com",
                            NormalizedUserName = "milicavandergouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEOW95myr9w1Sd/xkfroqcT9OiFIOgeaYURz8bWuv8HjGHvtHyxV2swnf9GVt9Oso3g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "milicavandergouw"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "696c0565-25da-434b-bf4c-a8d4b2346648",
                            Email = "yvonbrussaard@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yvon",
                            LastName = "Brussaard",
                            LockoutEnabled = false,
                            Name = "Yvon Brussaard",
                            NormalizedEmail = "yvonbrussaard@example.com",
                            NormalizedUserName = "yvonbrussaard",
                            PasswordHash = "AQAAAAEAACcQAAAAEEtlQOuNKpzLPnVpedAa2q8Ob5VwrxsLn0sB1KoAbUhhiovsdTEHUCNNqfTNTp2oIQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yvonbrussaard"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0558a0e-0d90-4537-8d27-39acfe2fd585",
                            Email = "bodhidatema@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bodhi",
                            LastName = "Datema",
                            LockoutEnabled = false,
                            Name = "Bodhi Datema",
                            NormalizedEmail = "bodhidatema@example.com",
                            NormalizedUserName = "bodhidatema",
                            PasswordHash = "AQAAAAEAACcQAAAAEIpbXvyBpOYEVmBUguDFv/VdLBHzrOjp4xxxciRzufmoLpz3YQ1rWQ2Ygw+6z6YX8A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bodhidatema"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6653ef77-0895-43a1-bd59-a02369c45db5",
                            Email = "noachschutrups@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noach",
                            LastName = "Schutrups",
                            LockoutEnabled = false,
                            Name = "Noach Schutrups",
                            NormalizedEmail = "noachschutrups@example.com",
                            NormalizedUserName = "noachschutrups",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWvMHMaLVOxa3wo/oE0mlqIZDhQO41EIRT+M+vzJjE8Cy8PoOjGQKfRlikGlrMnPA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noachschutrups"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7986fb7-1de8-4fa7-b9e4-d3bfa6c5adfd",
                            Email = "ouassimbekking@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ouassim",
                            LastName = "Bekking",
                            LockoutEnabled = false,
                            Name = "Ouassim Bekking",
                            NormalizedEmail = "ouassimbekking@example.com",
                            NormalizedUserName = "ouassimbekking",
                            PasswordHash = "AQAAAAEAACcQAAAAEO8WSE7KREaNxZR7flLm0pFIDQPOqCyaJA8XzPdeKm/UfhPGA2/F6RXBSl4ylkoZ4A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ouassimbekking"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97030630-5574-4465-843a-dda7e6be2ddf",
                            Email = "noervanderkruit@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noer",
                            LastName = "Van der Kruit",
                            LockoutEnabled = false,
                            Name = "Noer Van der Kruit",
                            NormalizedEmail = "noervanderkruit@example.com",
                            NormalizedUserName = "noervanderkruit",
                            PasswordHash = "AQAAAAEAACcQAAAAEO4gp79zt+E9Mnv15WG27yxHXSTYiq5wgyWIW7eW/6XjdCnuLCjJGeGDne2q5xKaJA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noervanderkruit"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62786c8a-5cfc-4218-9ec9-0afe739172b5",
                            Email = "kaanvanmaarseveen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaan",
                            LastName = "Van Maarseveen",
                            LockoutEnabled = false,
                            Name = "Kaan Van Maarseveen",
                            NormalizedEmail = "kaanvanmaarseveen@example.com",
                            NormalizedUserName = "kaanvanmaarseveen",
                            PasswordHash = "AQAAAAEAACcQAAAAEGqOncE0gHjxYpkiXO42xAvM8RFEhKEDzShj5lDebabuzcpP8NdDJC9Z8+gajbcY5A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaanvanmaarseveen"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92c0115f-e540-45e9-8d53-5432e87d4ca1",
                            Email = "owenkaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Kaal",
                            LockoutEnabled = false,
                            Name = "Owen Kaal",
                            NormalizedEmail = "owenkaal@example.com",
                            NormalizedUserName = "owenkaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEDwHWWlY1okU+DA2VijUkwb/SF+Pse9uK6kOFDFNvNkKkxwlqVDyoVOAhZb/bzedJA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "owenkaal"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de67e382-36a2-49b4-ae3a-2af739c11927",
                            Email = "paulinebah@example.com",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "Bah",
                            LockoutEnabled = false,
                            Name = "Pauline Bah",
                            NormalizedEmail = "paulinebah@example.com",
                            NormalizedUserName = "paulinebah",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwVVM44uySbMhcljJ7L0zkXKyADMNjruxJWJckqeGr2YUQBaYO1Kachc6zlt7xBew==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "paulinebah"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e33eccf0-673b-4994-9dbf-c6ae5c954207",
                            Email = "caterinatas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Caterina",
                            LastName = "Tas",
                            LockoutEnabled = false,
                            Name = "Caterina Tas",
                            NormalizedEmail = "caterinatas@example.com",
                            NormalizedUserName = "caterinatas",
                            PasswordHash = "AQAAAAEAACcQAAAAEGgUssWXZUFHu8exku2/K89oGzAOD+e6++VFd93zMTsQp2KrNKlvmKR9UaFhamrIbA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caterinatas"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea67c3f9-ccdf-4be0-b815-9db3a063d036",
                            Email = "edtouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ed",
                            LastName = "Touw",
                            LockoutEnabled = false,
                            Name = "Ed Touw",
                            NormalizedEmail = "edtouw@example.com",
                            NormalizedUserName = "edtouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFrvC33AaJT0+mftg70kdWYwPNSj9f9nK/GCpaREWdOSe2T6rAi8kEMNmKJfvVZZA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "edtouw"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a9ee167-d305-4f92-b247-533cda16353a",
                            Email = "hugofidom@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hugo",
                            LastName = "Fidom",
                            LockoutEnabled = false,
                            Name = "Hugo Fidom",
                            NormalizedEmail = "hugofidom@example.com",
                            NormalizedUserName = "hugofidom",
                            PasswordHash = "AQAAAAEAACcQAAAAEL8LqRs5vdlvzAuJxdpxrFKvm5KSceInhHjzxyNxKy2i+sSaHFw+RpkKqbaSd6+vtw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "hugofidom"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eda013ed-9094-4953-bcb9-839c115c90d1",
                            Email = "nannebesseling@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nanne",
                            LastName = "Besseling",
                            LockoutEnabled = false,
                            Name = "Nanne Besseling",
                            NormalizedEmail = "nannebesseling@example.com",
                            NormalizedUserName = "nannebesseling",
                            PasswordHash = "AQAAAAEAACcQAAAAENY1bbWRdPZCBGfv35FuhPY/0f0Ftxj/yhLGNB572S1jXXYg+l9UkIMW8k6PPWhHHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nannebesseling"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3e76898-bcd8-449d-9011-a86ebd96d1c4",
                            Email = "teunisjesalden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Teunisje",
                            LastName = "Salden",
                            LockoutEnabled = false,
                            Name = "Teunisje Salden",
                            NormalizedEmail = "teunisjesalden@example.com",
                            NormalizedUserName = "teunisjesalden",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfsnUDqNw957HPTlauDvlcopsW9gUGDV5yVwk+Paxp929Y0f7ljKEyZYVKjRb2d1Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "teunisjesalden"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7da15432-e479-4ae8-b756-8ffe90e39516",
                            Email = "rochedoornink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Roché",
                            LastName = "Doornink",
                            LockoutEnabled = false,
                            Name = "Roché Doornink",
                            NormalizedEmail = "rochedoornink@example.com",
                            NormalizedUserName = "rochedoornink",
                            PasswordHash = "AQAAAAEAACcQAAAAEFeIhSIlHZla1a5X7pm9GgOsCOslrKE84Wns5Y1euXVE8hfAvhafJoOZUEGPNKd2QQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rochedoornink"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "219874fd-30d0-49f9-88d7-060684503216",
                            Email = "yuenboertien@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yuen",
                            LastName = "Boertien",
                            LockoutEnabled = false,
                            Name = "Yuen Boertien",
                            NormalizedEmail = "yuenboertien@example.com",
                            NormalizedUserName = "yuenboertien",
                            PasswordHash = "AQAAAAEAACcQAAAAEINiCU+xk8K1ihQC6XHOfo47QaBwQosryYWL5WZ7P9P+OOv4JqrkGC6y/Gfo/whuyg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yuenboertien"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "491fffee-5f57-44a0-b3f8-2c52973afc99",
                            Email = "heinrichmook@example.com",
                            EmailConfirmed = false,
                            FirstName = "Heinrich",
                            LastName = "Mook",
                            LockoutEnabled = false,
                            Name = "Heinrich Mook",
                            NormalizedEmail = "heinrichmook@example.com",
                            NormalizedUserName = "heinrichmook",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxGyG27fJ131mWDjenjwi9rCCeWnNdVsDeIWaZR+JVsXVsjtCpgkwlhgGbiKSdy7A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "heinrichmook"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f835bc29-2140-4547-93fe-8435fd2961cf",
                            Email = "keriantonisse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Keri",
                            LastName = "Antonisse",
                            LockoutEnabled = false,
                            Name = "Keri Antonisse",
                            NormalizedEmail = "keriantonisse@example.com",
                            NormalizedUserName = "keriantonisse",
                            PasswordHash = "AQAAAAEAACcQAAAAENmYlBYXIk4r27DsSnYUC8txdaTztkiyXg2BqMRgHLFly7ZRuoSk/SfEMBJXyiPU3A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "keriantonisse"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5beecf3-5fda-48d9-9a9e-25e8cfcf3f1b",
                            Email = "beerrebergen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Beer",
                            LastName = "Rebergen",
                            LockoutEnabled = false,
                            Name = "Beer Rebergen",
                            NormalizedEmail = "beerrebergen@example.com",
                            NormalizedUserName = "beerrebergen",
                            PasswordHash = "AQAAAAEAACcQAAAAEIuWNT0xq6SXP7TWt564af+AW6YZCO5mkDzY2Ko/OsZtEvr8r5nx8FwVeIH9s/Sd4A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "beerrebergen"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3af57774-2be9-40b0-8128-99a9930f1541",
                            Email = "kainvandergun@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaïn",
                            LastName = "Van der Gun",
                            LockoutEnabled = false,
                            Name = "Kaïn Van der Gun",
                            NormalizedEmail = "kainvandergun@example.com",
                            NormalizedUserName = "kainvandergun",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbocOliO4HJUyJY1N56HstnVvejCnFmngG8Oc3LyHwRcZ4eSSJHr31JTKHXpgWVew==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kainvandergun"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cc94ff4-ac8c-4d7b-9a55-e5143b89a8cb",
                            Email = "marloeswesterdijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marloes",
                            LastName = "Westerdijk",
                            LockoutEnabled = false,
                            Name = "Marloes Westerdijk",
                            NormalizedEmail = "marloeswesterdijk@example.com",
                            NormalizedUserName = "marloeswesterdijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLhw1qsQmrT/HoSBzGNdNwYU70j0ngjroy4JfJj3lk0Hq61tJ6atdVI9gJVqpDjKA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marloeswesterdijk"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c269e046-29ea-45df-9e0b-fe1481d0a8e7",
                            Email = "aurelieesajas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aurélie",
                            LastName = "Esajas",
                            LockoutEnabled = false,
                            Name = "Aurélie Esajas",
                            NormalizedEmail = "aurelieesajas@example.com",
                            NormalizedUserName = "aurelieesajas",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3VI1xmmqkWTbpHY3L05Lis/fDxw191b9KtrclOZVkN+GX2n3XBUJNKXiwdBamNHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aurelieesajas"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85c0b5ac-c8b6-46ca-9d82-05d6198b19d4",
                            Email = "gerlindenooijens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gerlinde",
                            LastName = "Nooijens",
                            LockoutEnabled = false,
                            Name = "Gerlinde Nooijens",
                            NormalizedEmail = "gerlindenooijens@example.com",
                            NormalizedUserName = "gerlindenooijens",
                            PasswordHash = "AQAAAAEAACcQAAAAEO3npRJreY5NUAqGfBpLT37B+TrHmcbHT6/FLrAMp/rwPrr7kKAqOyNcjngBIf18Jg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "gerlindenooijens"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00c57082-74a3-43eb-85b3-804cf511878f",
                            Email = "summerbrinkhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Summer",
                            LastName = "Brinkhuis",
                            LockoutEnabled = false,
                            Name = "Summer Brinkhuis",
                            NormalizedEmail = "summerbrinkhuis@example.com",
                            NormalizedUserName = "summerbrinkhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQPbRPW8+xJ2+Zqmo6iFljqlDmmY4zzhioOp+jKjb+tOo6psH78sReaKK8JFvwCXw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "summerbrinkhuis"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ba2bac5-7158-491e-a4ec-6a1ae6bd2b67",
                            Email = "quirinavandusschoten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Quirina",
                            LastName = "Van Dusschoten",
                            LockoutEnabled = false,
                            Name = "Quirina Van Dusschoten",
                            NormalizedEmail = "quirinavandusschoten@example.com",
                            NormalizedUserName = "quirinavandusschoten",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAYMePiZocWlC/A3VdO4ziZlN7Grk+URtR0VJ7G78dc5MBfJoUpOjgvN7HZR9hjxg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "quirinavandusschoten"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18442d8a-f40c-4187-956d-3c44909cdde4",
                            Email = "emmelienhandels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emmelien",
                            LastName = "Handels",
                            LockoutEnabled = false,
                            Name = "Emmelien Handels",
                            NormalizedEmail = "emmelienhandels@example.com",
                            NormalizedUserName = "emmelienhandels",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAmKBXMnODkvXjjjfeaTWfA79MygtWXZNEBWZz9bv0rrB7/HsNzwLAS5V9sA9/lAg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "emmelienhandels"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3357bc4-7007-4eee-83a9-b519fbd08aac",
                            Email = "wensleycurvers@example.com",
                            EmailConfirmed = false,
                            FirstName = "Wensley",
                            LastName = "Curvers",
                            LockoutEnabled = false,
                            Name = "Wensley Curvers",
                            NormalizedEmail = "wensleycurvers@example.com",
                            NormalizedUserName = "wensleycurvers",
                            PasswordHash = "AQAAAAEAACcQAAAAEIt9y7wYTbYaZGiq5/2hRRa14a2Y4HDRVWNEjxOfNt3NHgIQe0GQuUqCO8DEkyDxsw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wensleycurvers"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e65e35e-7e7f-45cc-a19c-645811f304bb",
                            Email = "dawidvanaart@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dawid",
                            LastName = "Van Aart",
                            LockoutEnabled = false,
                            Name = "Dawid Van Aart",
                            NormalizedEmail = "dawidvanaart@example.com",
                            NormalizedUserName = "dawidvanaart",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUaf62GZennJb0dSrxr31SHEjbHA5p//jpLid442zfDL+wQKfLCdp7BAMtOhQB1+w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dawidvanaart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "678864f8-c057-4195-a919-f28efabdaa16",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "7fda4a4c-3973-411b-86df-67ae0d1edbbb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "149fbda6-8b60-4362-8471-d7951fce6ae6",
                            Name = "Studiebegeleider",
                            NormalizedName = "STUDIEBEGELEIDER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "0fa44cf3-1820-4694-9abe-a8035949d78d",
                            Name = "Moduleverantwoordelijke",
                            NormalizedName = "MODULEVERANTWOORDELIJKE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "23",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "24",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "25",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "26",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "27",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "28",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "29",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "30",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "35",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "36",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "37",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "39",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "43",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
