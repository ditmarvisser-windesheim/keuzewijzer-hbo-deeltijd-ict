// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    partial class KeuzewijzerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 5
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 6
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 7
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 8
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Semester Item 5",
                            Name = "Semester Item 5",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Semester Item 6",
                            Name = "Semester Item 6",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Semester Item 7",
                            Name = "Semester Item 7",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Semester Item 8",
                            Name = "Semester Item 8",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            Semester = 2,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 4,
                            Semester = 2,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 5,
                            Semester = 1,
                            SemesterItemId = 5,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 6,
                            Semester = 2,
                            SemesterItemId = 6,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 7,
                            Semester = 1,
                            SemesterItemId = 7,
                            StudyRouteId = 1,
                            Year = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "064bea66-5b56-4f46-8588-69d67b37d6ba",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            NormalizedEmail = "admin@example.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEOemOwOxlRsFryKBHBOq91bX5N1vvpkWrERSpsPAUBt7ErssQZcQ5/Pi4z6iOUJ4qQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00669581-aef2-4611-8134-3afc413b5a08",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            NormalizedEmail = "eugenevanroden@example.com",
                            NormalizedUserName = "eugenevanroden",
                            PasswordHash = "AQAAAAEAACcQAAAAEEK+MZODX2RakLuSW+IuJQkE5TdwWaXp8cn6mNusrzQlQd1jnoPt06XJ7/wl19xKlA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a70191d-8fe7-4e15-beb1-dd2b0d2d0d80",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            NormalizedEmail = "theotan@example.com",
                            NormalizedUserName = "theotan",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDaejRu6o50LSRp/Dkl/Nx3lpl5C3Hd7I6p21ZjjQcRtW6DTmn3CVS/2loxpfkejQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70af6f72-083e-49b2-bda2-5c14c61c560f",
                            Email = "floruscicek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Florus",
                            LastName = "Çiçek",
                            LockoutEnabled = false,
                            Name = "Florus Çiçek",
                            NormalizedEmail = "floruscicek@example.com",
                            NormalizedUserName = "floruscicek",
                            PasswordHash = "AQAAAAEAACcQAAAAEPKY5649aPYAn2u0TxFQ2XrZGDxBXS5tRIelXN5jfvVXlF2VOIOm55DotawVAtk1aw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "floruscicek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77801ebd-3954-4b44-b964-2cdba3e1c6bc",
                            Email = "marlenewolf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlène",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            Name = "Marlène Wolf",
                            NormalizedEmail = "marlenewolf@example.com",
                            NormalizedUserName = "marlenewolf",
                            PasswordHash = "AQAAAAEAACcQAAAAEOS279zVUdVK88RbI0fft2hLUovnA/rq0ZFNLE9vAq3YehTd4hjOsBdhN4QcETapIQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlenewolf"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "046a2bf7-a36f-4bf7-90aa-151a7f2bbfd4",
                            Email = "bilalsteentjes@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bilal",
                            LastName = "Steentjes",
                            LockoutEnabled = false,
                            Name = "Bilal Steentjes",
                            NormalizedEmail = "bilalsteentjes@example.com",
                            NormalizedUserName = "bilalsteentjes",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVf171/m6lJNbR5tFmL+hc39cvBLeTh+0QKslmullqurnfQcS8VtlP3kuYGeHlEsA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bilalsteentjes"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9361c9d8-9bcf-4b89-9e64-a5c7885fde65",
                            Email = "marlijngiebels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlijn",
                            LastName = "Giebels",
                            LockoutEnabled = false,
                            Name = "Marlijn Giebels",
                            NormalizedEmail = "marlijngiebels@example.com",
                            NormalizedUserName = "marlijngiebels",
                            PasswordHash = "AQAAAAEAACcQAAAAEENy58PsQsm9nKfRt+ClgpyfcaE75echa19rE+RepxOuudptqbtWYx5xzziftxI5Qw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlijngiebels"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69ca07f5-562c-484f-abaf-ce18460e60b5",
                            Email = "sabrivandereijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabri",
                            LastName = "Van der Eijk",
                            LockoutEnabled = false,
                            Name = "Sabri Van der Eijk",
                            NormalizedEmail = "sabrivandereijk@example.com",
                            NormalizedUserName = "sabrivandereijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEHGKq0yH9gB+wLtp6RBSBNuS9qm29DT4m31mo40xXpOs6Z3KuU679IPUW6DRb7zmww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabrivandereijk"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0410d5c-f77f-4337-9eb8-3357e249a422",
                            Email = "caseyandriesse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Casey",
                            LastName = "Andriesse",
                            LockoutEnabled = false,
                            Name = "Casey Andriesse",
                            NormalizedEmail = "caseyandriesse@example.com",
                            NormalizedUserName = "caseyandriesse",
                            PasswordHash = "AQAAAAEAACcQAAAAEKC6AQzAYi/yP2wUsNn2a97t7IOsFZe4wZZeGgBqXpSozmAIYrDqROBVDuWVIPTozw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caseyandriesse"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d732a09-3c9e-4e4c-8d42-c16e2af433c5",
                            Email = "nikhuijskens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LastName = "Huijskens",
                            LockoutEnabled = false,
                            Name = "Nik Huijskens",
                            NormalizedEmail = "nikhuijskens@example.com",
                            NormalizedUserName = "nikhuijskens",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5zNfaZrNSeG20cYnl4gEAhjkaDyugf94CJF0KMB0Ba+ANqU8uARHiPpPbItAnsZQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nikhuijskens"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "991e4ad4-2575-4e82-a886-9edb0cc391d1",
                            Email = "duranpetiet@example.com",
                            EmailConfirmed = false,
                            FirstName = "Duran",
                            LastName = "Petiet",
                            LockoutEnabled = false,
                            Name = "Duran Petiet",
                            NormalizedEmail = "duranpetiet@example.com",
                            NormalizedUserName = "duranpetiet",
                            PasswordHash = "AQAAAAEAACcQAAAAENe5xbo09yyE5yhF8hK4v74bf61FnNewUT9M4VMMMK+dDjDG5QKIc/K5/jWCA/vuhw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "duranpetiet"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7394e3eb-c41f-4d36-b375-b5da64d41cdd",
                            Email = "veroniekbravenboer@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veroniek",
                            LastName = "Bravenboer",
                            LockoutEnabled = false,
                            Name = "Veroniek Bravenboer",
                            NormalizedEmail = "veroniekbravenboer@example.com",
                            NormalizedUserName = "veroniekbravenboer",
                            PasswordHash = "AQAAAAEAACcQAAAAEFilGDEou19oQBb0AXrsFRt6OdRgbltqn/BSSV0CecaYDeCoXkSLYvpac40cLlVuyw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "veroniekbravenboer"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7146aca2-edde-4135-b254-d2a8e4b1ffeb",
                            Email = "kaynejagtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kayne",
                            LastName = "Jagtenberg",
                            LockoutEnabled = false,
                            Name = "Kayne Jagtenberg",
                            NormalizedEmail = "kaynejagtenberg@example.com",
                            NormalizedUserName = "kaynejagtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEB5eppW+JcpanPTuu0RujYDUrnfPqsM3hS/+FN2wheXG9apo1ZwSF+Uolypx52w1/w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaynejagtenberg"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdfff9c0-72c0-4069-9337-305cfbf765c0",
                            Email = "siebrigjeabdi@example.com",
                            EmailConfirmed = false,
                            FirstName = "Siebrigje",
                            LastName = "Abdi",
                            LockoutEnabled = false,
                            Name = "Siebrigje Abdi",
                            NormalizedEmail = "siebrigjeabdi@example.com",
                            NormalizedUserName = "siebrigjeabdi",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFIQ0Zt+MPSzQifkI7QcNRrFXue30W+CToLVni40Qsb7xUzXjGMGSHQGR/EffXqVw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siebrigjeabdi"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f344bfbd-5faf-4eae-b4c3-ea410d19d24a",
                            Email = "sterrelambert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sterre",
                            LastName = "Lambert",
                            LockoutEnabled = false,
                            Name = "Sterre Lambert",
                            NormalizedEmail = "sterrelambert@example.com",
                            NormalizedUserName = "sterrelambert",
                            PasswordHash = "AQAAAAEAACcQAAAAEORDTmibuh07zGdsb/iluvJFSlkpwTwaTw33ifCSaX6x3HSZmlv8yCOPOABKfW3btw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sterrelambert"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b779d9-ddb7-430f-a667-df9b8678996d",
                            Email = "milicavandergouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            LastName = "Van der Gouw",
                            LockoutEnabled = false,
                            Name = "Milica Van der Gouw",
                            NormalizedEmail = "milicavandergouw@example.com",
                            NormalizedUserName = "milicavandergouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5Z9DuWeyOe6q7pYBfbctyw2dh26hbB4uHltUEKiy9JkZXgxSJiUYlsJRyx3TthJA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "milicavandergouw"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e173276e-1a96-4fca-bacb-fef18149fd32",
                            Email = "yvonbrussaard@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yvon",
                            LastName = "Brussaard",
                            LockoutEnabled = false,
                            Name = "Yvon Brussaard",
                            NormalizedEmail = "yvonbrussaard@example.com",
                            NormalizedUserName = "yvonbrussaard",
                            PasswordHash = "AQAAAAEAACcQAAAAECcIhpT3dGvwNjvkgn5Zk8PKC8MKQJ/llLjKQbtJ8NuEoKiOyttDfCa7mV3p92Fhww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yvonbrussaard"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b34e9eb7-8f9f-41c7-87a6-1a2f0c3692a9",
                            Email = "bodhidatema@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bodhi",
                            LastName = "Datema",
                            LockoutEnabled = false,
                            Name = "Bodhi Datema",
                            NormalizedEmail = "bodhidatema@example.com",
                            NormalizedUserName = "bodhidatema",
                            PasswordHash = "AQAAAAEAACcQAAAAEPvjvlhSqvm2aOow1TLf6z5k4iHJ9QDhRfFQmnKaf9DTzqTXMpQGeehHWcme2aMQHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bodhidatema"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36b426ac-443b-4c00-bbaa-72be1a48641b",
                            Email = "noachschutrups@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noach",
                            LastName = "Schutrups",
                            LockoutEnabled = false,
                            Name = "Noach Schutrups",
                            NormalizedEmail = "noachschutrups@example.com",
                            NormalizedUserName = "noachschutrups",
                            PasswordHash = "AQAAAAEAACcQAAAAEJhFmtro3AkpYURhs0LRivT6FJZIhQxhnI43YBWWixeKyzzAS1mvSCumgHXvZlUGTA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noachschutrups"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "971f31b5-3b37-4ab5-8c69-4313c5fb2b9f",
                            Email = "ouassimbekking@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ouassim",
                            LastName = "Bekking",
                            LockoutEnabled = false,
                            Name = "Ouassim Bekking",
                            NormalizedEmail = "ouassimbekking@example.com",
                            NormalizedUserName = "ouassimbekking",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpEfRsnaAe4fHw1kx2yUlEtXv92uZHYSyODXqd7kKWZSDqY0TijrQlV1hEPTzCw3A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ouassimbekking"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec8de0dc-1be8-46ab-969e-c6dba9d24027",
                            Email = "noervanderkruit@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noer",
                            LastName = "Van der Kruit",
                            LockoutEnabled = false,
                            Name = "Noer Van der Kruit",
                            NormalizedEmail = "noervanderkruit@example.com",
                            NormalizedUserName = "noervanderkruit",
                            PasswordHash = "AQAAAAEAACcQAAAAECTSlq9aFbDMK5SMYwu8lZZKW9z6dXQHarN80Bfj5vSsPs8wiUmLfYPiwGPqmIl9SA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noervanderkruit"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc8abcbb-3a96-4d53-bac0-dd4c2bdcc357",
                            Email = "kaanvanmaarseveen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaan",
                            LastName = "Van Maarseveen",
                            LockoutEnabled = false,
                            Name = "Kaan Van Maarseveen",
                            NormalizedEmail = "kaanvanmaarseveen@example.com",
                            NormalizedUserName = "kaanvanmaarseveen",
                            PasswordHash = "AQAAAAEAACcQAAAAEDgCgLo3u5GOI4gpnct8cU1HvQ0Zn+KrUBB5OlSysi34UAi/Rsl4TcR6gTgLuriajw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaanvanmaarseveen"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42634c5b-b4da-4d7d-a5e6-e36cab6f1e75",
                            Email = "owenkaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Kaal",
                            LockoutEnabled = false,
                            Name = "Owen Kaal",
                            NormalizedEmail = "owenkaal@example.com",
                            NormalizedUserName = "owenkaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEMoj//FqDb11e58oZrb7nkeJ6QkYF2NxwXVT0d1HHnRq3VMAjjCTXPiNqGCCoxtA7Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "owenkaal"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dc8634b-a79d-40e7-8ea4-af4138dfd350",
                            Email = "paulinebah@example.com",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "Bah",
                            LockoutEnabled = false,
                            Name = "Pauline Bah",
                            NormalizedEmail = "paulinebah@example.com",
                            NormalizedUserName = "paulinebah",
                            PasswordHash = "AQAAAAEAACcQAAAAEH2vLNEy5fESV8YIgaNm3BMBjgXuO9kEd5t/53PslAk+FFGMcl3O2+wVOmpC6tVzZQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "paulinebah"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "541b1943-72f6-4797-b6f8-6cbd1861c8e4",
                            Email = "caterinatas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Caterina",
                            LastName = "Tas",
                            LockoutEnabled = false,
                            Name = "Caterina Tas",
                            NormalizedEmail = "caterinatas@example.com",
                            NormalizedUserName = "caterinatas",
                            PasswordHash = "AQAAAAEAACcQAAAAENQr4OlAFb18JHNI5C+tM3Ubm3HVmK2sX+AAh+tEwxbSTVkHcnvz1ULxVAXn/qz5yQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caterinatas"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6800abc6-224e-4002-8096-b5ef259c911a",
                            Email = "edtouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ed",
                            LastName = "Touw",
                            LockoutEnabled = false,
                            Name = "Ed Touw",
                            NormalizedEmail = "edtouw@example.com",
                            NormalizedUserName = "edtouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEAWcCjHW5esjGMURMlFjdFXy9pOlz+CdElzCNm00VWsP87aZQG75kYwlW37NeLZzDw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "edtouw"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dccff83-69b6-4d57-acfe-b9ba5bf24a8d",
                            Email = "hugofidom@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hugo",
                            LastName = "Fidom",
                            LockoutEnabled = false,
                            Name = "Hugo Fidom",
                            NormalizedEmail = "hugofidom@example.com",
                            NormalizedUserName = "hugofidom",
                            PasswordHash = "AQAAAAEAACcQAAAAEEePFxjxoNUTTSQsGZXMgwi1fukk+itMCB0aCHrHt8mNRGx0AXnyrSsRA1inOi4/OA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "hugofidom"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad20e70c-76e2-4bdc-91ca-05b35938d23b",
                            Email = "nannebesseling@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nanne",
                            LastName = "Besseling",
                            LockoutEnabled = false,
                            Name = "Nanne Besseling",
                            NormalizedEmail = "nannebesseling@example.com",
                            NormalizedUserName = "nannebesseling",
                            PasswordHash = "AQAAAAEAACcQAAAAED4XtctQW9GkYsx4oOop2Hgvt+OviKqA5+jsRPXxrjtD6AR1kMs1Vdly0n2qk2EKrQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nannebesseling"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eea42411-9c3e-445c-b152-3c0226678c01",
                            Email = "teunisjesalden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Teunisje",
                            LastName = "Salden",
                            LockoutEnabled = false,
                            Name = "Teunisje Salden",
                            NormalizedEmail = "teunisjesalden@example.com",
                            NormalizedUserName = "teunisjesalden",
                            PasswordHash = "AQAAAAEAACcQAAAAEHZ37nQgTbi2F9a2VZbneG1ZS+qYr5Ib9JbWKRjKTVrTu7amWBLC0LaXqFMs7ydOEg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "teunisjesalden"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffff981c-311a-43be-8083-c1f32ae66f93",
                            Email = "rochedoornink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Roché",
                            LastName = "Doornink",
                            LockoutEnabled = false,
                            Name = "Roché Doornink",
                            NormalizedEmail = "rochedoornink@example.com",
                            NormalizedUserName = "rochedoornink",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/Age77nUZTJz4FKuoeg6Hnh9H1rNyY5DHHvgVcvO62qhMChtRpBM88tDHfvf5gNg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rochedoornink"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32dfdc92-33ad-4e70-b029-000643f6be71",
                            Email = "yuenboertien@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yuen",
                            LastName = "Boertien",
                            LockoutEnabled = false,
                            Name = "Yuen Boertien",
                            NormalizedEmail = "yuenboertien@example.com",
                            NormalizedUserName = "yuenboertien",
                            PasswordHash = "AQAAAAEAACcQAAAAEAV+9O3yXndfrQ4wpMkrE98TeZ4fHUB5WclSCKpRbjAKc0p39CEa5Zx/EkabmwK4Hg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yuenboertien"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b263dd86-e329-4042-8c98-f6015179dcce",
                            Email = "heinrichmook@example.com",
                            EmailConfirmed = false,
                            FirstName = "Heinrich",
                            LastName = "Mook",
                            LockoutEnabled = false,
                            Name = "Heinrich Mook",
                            NormalizedEmail = "heinrichmook@example.com",
                            NormalizedUserName = "heinrichmook",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwE3uf/PPx3nabAy+IGa3tazMUrv8HvXbgSnCLkzUcl0xF4bhhCCdYG4rzRj3DLUA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "heinrichmook"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22acdddd-8e23-4239-a995-7c8c01906bca",
                            Email = "keriantonisse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Keri",
                            LastName = "Antonisse",
                            LockoutEnabled = false,
                            Name = "Keri Antonisse",
                            NormalizedEmail = "keriantonisse@example.com",
                            NormalizedUserName = "keriantonisse",
                            PasswordHash = "AQAAAAEAACcQAAAAEC+SIN3LlvGHJH59IOZM/jG+pqUVcWvO8UHZwYUcAtYNLKjlrkAlIvVTt9NLskuM5g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "keriantonisse"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d524a04-f26f-4c6b-ae51-7b5c60b5b9d1",
                            Email = "beerrebergen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Beer",
                            LastName = "Rebergen",
                            LockoutEnabled = false,
                            Name = "Beer Rebergen",
                            NormalizedEmail = "beerrebergen@example.com",
                            NormalizedUserName = "beerrebergen",
                            PasswordHash = "AQAAAAEAACcQAAAAECQOOPOOFjnkoHEis2Fx0/cQ986WNcjHffpdfr/iH9tyECQokGQtrZ8/cOdn8MRVBQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "beerrebergen"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5187f47-6954-496b-b267-b05c4e97dfae",
                            Email = "kainvandergun@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaïn",
                            LastName = "Van der Gun",
                            LockoutEnabled = false,
                            Name = "Kaïn Van der Gun",
                            NormalizedEmail = "kainvandergun@example.com",
                            NormalizedUserName = "kainvandergun",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDL4QIhVU065CLTQTwsyeRsSGeRshA1Ua8qm+5ujAn87u6hVNfiGT4B4PET6aBUhQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kainvandergun"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59ae4fe6-c69e-4ade-9b19-328a64eef1eb",
                            Email = "marloeswesterdijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marloes",
                            LastName = "Westerdijk",
                            LockoutEnabled = false,
                            Name = "Marloes Westerdijk",
                            NormalizedEmail = "marloeswesterdijk@example.com",
                            NormalizedUserName = "marloeswesterdijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCljywJNlUtcfGAAg+5FnFBUvVhoF19kZYXmglGdBrcpQcgBoCICOTKyuaqmBLZMg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marloeswesterdijk"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ebfcfdd-af99-4dc0-a0e2-4430c470fdf4",
                            Email = "aurelieesajas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aurélie",
                            LastName = "Esajas",
                            LockoutEnabled = false,
                            Name = "Aurélie Esajas",
                            NormalizedEmail = "aurelieesajas@example.com",
                            NormalizedUserName = "aurelieesajas",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZxgtgRuA/tUEvmKJynUo/+F7fbZuKuh7OAETsB6lYgl+Zjjr6GGg+c2sWyKgRnCA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aurelieesajas"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "649181c8-b299-4e19-b560-e3ab2a6139e2",
                            Email = "gerlindenooijens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gerlinde",
                            LastName = "Nooijens",
                            LockoutEnabled = false,
                            Name = "Gerlinde Nooijens",
                            NormalizedEmail = "gerlindenooijens@example.com",
                            NormalizedUserName = "gerlindenooijens",
                            PasswordHash = "AQAAAAEAACcQAAAAEKtLIZBrNlJyphISzVE7Secl0IQ2NpEaFjdKQ5StEsoNRQ4T/i6HehSLbTi0wADLEA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "gerlindenooijens"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6c98240-9e00-4a5e-8c85-210aefae6afc",
                            Email = "summerbrinkhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Summer",
                            LastName = "Brinkhuis",
                            LockoutEnabled = false,
                            Name = "Summer Brinkhuis",
                            NormalizedEmail = "summerbrinkhuis@example.com",
                            NormalizedUserName = "summerbrinkhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKd68bTNlE1RSQV3Qf83HWibn7QsjhIIVqSnAZ7knUx8/8zZPZhQbL1hIU7XGTvaQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "summerbrinkhuis"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dabf79f0-0a09-4a18-b3f6-0ebf20c70616",
                            Email = "quirinavandusschoten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Quirina",
                            LastName = "Van Dusschoten",
                            LockoutEnabled = false,
                            Name = "Quirina Van Dusschoten",
                            NormalizedEmail = "quirinavandusschoten@example.com",
                            NormalizedUserName = "quirinavandusschoten",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKL3JfHKZWksC+d+yR3EBTNXAcnNCV0ByAjA9nEdbdAbNtbXb0F1sLYJS99dJ/qwA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "quirinavandusschoten"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20d157d1-5c6d-4fe0-8a25-09e88d9ebff3",
                            Email = "emmelienhandels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emmelien",
                            LastName = "Handels",
                            LockoutEnabled = false,
                            Name = "Emmelien Handels",
                            NormalizedEmail = "emmelienhandels@example.com",
                            NormalizedUserName = "emmelienhandels",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4S0L77hJAFBg5yQ1659FglFMFZ+SsXIhiIFaI5OG3LBMtsLaN0pi0ifrwYE9QaAQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "emmelienhandels"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ed17907-fec7-4f8e-8b55-c8f81964da99",
                            Email = "wensleycurvers@example.com",
                            EmailConfirmed = false,
                            FirstName = "Wensley",
                            LastName = "Curvers",
                            LockoutEnabled = false,
                            Name = "Wensley Curvers",
                            NormalizedEmail = "wensleycurvers@example.com",
                            NormalizedUserName = "wensleycurvers",
                            PasswordHash = "AQAAAAEAACcQAAAAEICfUKtS106EFqwgeCyl0/MWikelvNKdOmHE6gyH4snu/4Uz1vvrGCPZ/kkSN+DyqA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wensleycurvers"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "233f3360-0ba6-408f-a666-a8a3e9ec9c6a",
                            Email = "dawidvanaart@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dawid",
                            LastName = "Van Aart",
                            LockoutEnabled = false,
                            Name = "Dawid Van Aart",
                            NormalizedEmail = "dawidvanaart@example.com",
                            NormalizedUserName = "dawidvanaart",
                            PasswordHash = "AQAAAAEAACcQAAAAEBegGqfMmiN0RzI5/m1Q/Mj9IPXdFBH34+6tu/prkfbXedMllZ5qykekLfzQTexcvw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dawidvanaart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "0e94b60c-e885-4187-a2f1-7e5bd67d7a7a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "fd732c56-fdb1-48cf-9495-7fb45ae94524",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "76e31498-77dc-4cf4-9066-6ad5b1fafe7b",
                            Name = "Studiebegeleider",
                            NormalizedName = "STUDIEBEGELEIDER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "a95edb51-0519-4eec-b267-07493407119c",
                            Name = "Moduleverantwoordelijke",
                            NormalizedName = "MODULEVERANTWOORDELIJKE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "23",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "24",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "25",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "26",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "27",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "28",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "29",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "30",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "35",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "36",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "37",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "39",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "43",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
