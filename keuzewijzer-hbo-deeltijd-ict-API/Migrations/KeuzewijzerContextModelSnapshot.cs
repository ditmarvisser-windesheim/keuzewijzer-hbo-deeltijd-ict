// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    partial class KeuzewijzerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 5
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 6
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 7
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 8
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 999
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Semester Item 5",
                            Name = "Semester Item 5",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Semester Item 6",
                            Name = "Semester Item 6",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Semester Item 7",
                            Name = "Semester Item 7",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Semester Item 8",
                            Name = "Semester Item 8",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 999,
                            Description = "Reparatiesemester",
                            Name = "Reparatiesemester",
                            Semester = 1,
                            YearJson = "[1,2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            Semester = 2,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 4,
                            Semester = 2,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 5,
                            Semester = 1,
                            SemesterItemId = 5,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 6,
                            Semester = 2,
                            SemesterItemId = 6,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 7,
                            Semester = 1,
                            SemesterItemId = 7,
                            StudyRouteId = 1,
                            Year = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97b80d07-a16d-4709-b6fd-0c7376838e27",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            NormalizedEmail = "admin@example.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHPlBfbw+mM/UmAW6I7Ph+IWtBouDwlmX+vIQK5wCPR4B9NhxV7tumq/rrtVh14Vrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b97229a-1eb9-43d9-87e4-00af434b818a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c08e82ce-a137-453c-b6fb-17989f06550d",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            NormalizedEmail = "eugenevanroden@example.com",
                            NormalizedUserName = "eugenevanroden",
                            PasswordHash = "AQAAAAEAACcQAAAAENTRp7+yOCI+oD7QcGq/536nRV3jqiP6/C1hbuZRaSWSEv0BSJfTAOOyiBazRiY9Hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d542bbc2-0638-4d58-9af3-5c4e2297065c",
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d173ecf4-dbf4-4f9b-956d-a4e7b0200183",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            NormalizedEmail = "theotan@example.com",
                            NormalizedUserName = "theotan",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOELd8Bzag/JUXlWDxrayPOMPmtHfj0XNVMmsBVelbKDDHFjdar9PXPWtKi79T/qQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdc079b1-d327-4693-a439-0bf6a2c95741",
                            TwoFactorEnabled = false,
                            UserName = "theotan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2d6f8be-6943-47c2-9155-cc1aadc8efa2",
                            Email = "floruscicek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Florus",
                            LastName = "Çiçek",
                            LockoutEnabled = false,
                            Name = "Florus Çiçek",
                            NormalizedEmail = "floruscicek@example.com",
                            NormalizedUserName = "floruscicek",
                            PasswordHash = "AQAAAAEAACcQAAAAENDGYjnpWlxz+DSBgIynmvlg0ltrECypdeUkjKlY6ngieRPEtehGF6EPQ6G1UNPQWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c5c640a-f588-482b-8e26-cf304b28f6a2",
                            TwoFactorEnabled = false,
                            UserName = "floruscicek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea744403-d67e-4f80-a48c-9289dbc95c7c",
                            Email = "marlenewolf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlène",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            Name = "Marlène Wolf",
                            NormalizedEmail = "marlenewolf@example.com",
                            NormalizedUserName = "marlenewolf",
                            PasswordHash = "AQAAAAEAACcQAAAAEGf0xtH+VudLrCOeqt6++mwBL/eXF/l1GCBKQ+38avle8hM3g+aZz/bmXLGrEw/MHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "013f89a1-e33f-490b-a9bd-0b66740961d7",
                            TwoFactorEnabled = false,
                            UserName = "marlenewolf"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "def282fa-7d82-493a-ba6a-01bbafea719a",
                            Email = "bilalsteentjes@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bilal",
                            LastName = "Steentjes",
                            LockoutEnabled = false,
                            Name = "Bilal Steentjes",
                            NormalizedEmail = "bilalsteentjes@example.com",
                            NormalizedUserName = "bilalsteentjes",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpI+Isjb4i6TnwlUJIg5U//HWbcrk1a/YVghctpzJN/uCCKcuP9AKYqIig6qFXlgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7013f10-0858-48dc-9e8d-5ad21b83e13c",
                            TwoFactorEnabled = false,
                            UserName = "bilalsteentjes"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a474edd2-9995-429e-affd-260f99920860",
                            Email = "marlijngiebels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlijn",
                            LastName = "Giebels",
                            LockoutEnabled = false,
                            Name = "Marlijn Giebels",
                            NormalizedEmail = "marlijngiebels@example.com",
                            NormalizedUserName = "marlijngiebels",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGwDfSqM7ZW8C2av1LLdpqlzEggcbuytqtfRCiG1xpDoNG/PqQjsNJYqFHCjySvYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95a2a95a-768a-4492-ac3f-dece8499d845",
                            TwoFactorEnabled = false,
                            UserName = "marlijngiebels"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc34217-6797-4e17-8b97-c0d217fe6835",
                            Email = "sabrivandereijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabri",
                            LastName = "Van der Eijk",
                            LockoutEnabled = false,
                            Name = "Sabri Van der Eijk",
                            NormalizedEmail = "sabrivandereijk@example.com",
                            NormalizedUserName = "sabrivandereijk",
                            PasswordHash = "AQAAAAEAACcQAAAAECARmuaUPS48+QyYiNOcROFOAtPXxASvQebxUefbM9VMvX5YikGamFm1GksK0JmJCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b007e0e2-8eae-4d7f-8fea-487e1c0ac172",
                            TwoFactorEnabled = false,
                            UserName = "sabrivandereijk"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb17797-93e5-47be-8fed-d94acd6a28df",
                            Email = "caseyandriesse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Casey",
                            LastName = "Andriesse",
                            LockoutEnabled = false,
                            Name = "Casey Andriesse",
                            NormalizedEmail = "caseyandriesse@example.com",
                            NormalizedUserName = "caseyandriesse",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7gbnTlFEAQpEqEc467lu3YVRV/1QP3yUyrbYrYirrcQEAZ5cT2dosHrmJTT7fxcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "571263e1-3858-4fc3-8750-3c454bf7e25d",
                            TwoFactorEnabled = false,
                            UserName = "caseyandriesse"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39681104-4710-4dce-bbda-64aa422c871d",
                            Email = "nikhuijskens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LastName = "Huijskens",
                            LockoutEnabled = false,
                            Name = "Nik Huijskens",
                            NormalizedEmail = "nikhuijskens@example.com",
                            NormalizedUserName = "nikhuijskens",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUdYYAM8R/dOVu3/x2wIo04LzZu+C3gvi0owmhw+5zTeHILJ3iY/lJ9gb5CQKJI1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "656408fa-daa7-4379-9ab5-f2096420af99",
                            TwoFactorEnabled = false,
                            UserName = "nikhuijskens"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97e234d4-5add-4e37-bac0-f7ae93ab6e27",
                            Email = "duranpetiet@example.com",
                            EmailConfirmed = false,
                            FirstName = "Duran",
                            LastName = "Petiet",
                            LockoutEnabled = false,
                            Name = "Duran Petiet",
                            NormalizedEmail = "duranpetiet@example.com",
                            NormalizedUserName = "duranpetiet",
                            PasswordHash = "AQAAAAEAACcQAAAAECgu2NP8aGi6L9Dn0RaHMHWZJcjTxZuQnIWje4ucTeP8bNuA1tiNVvRKMqs/PUE25A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7c8fd29-b6b5-432b-add5-dee230099b2d",
                            TwoFactorEnabled = false,
                            UserName = "duranpetiet"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "057b2e81-d5c4-41c3-9e58-759e6e937a1c",
                            Email = "veroniekbravenboer@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veroniek",
                            LastName = "Bravenboer",
                            LockoutEnabled = false,
                            Name = "Veroniek Bravenboer",
                            NormalizedEmail = "veroniekbravenboer@example.com",
                            NormalizedUserName = "veroniekbravenboer",
                            PasswordHash = "AQAAAAEAACcQAAAAEIE730MQYWEItFyfDfFFNjDvVSGAkK54mNrvanOXUwnjHGx1XqzUPAhR3t4fcleQZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57b1c53c-4a18-4981-8fff-b041de0b2bc5",
                            TwoFactorEnabled = false,
                            UserName = "veroniekbravenboer"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74651ce5-9c3e-49a8-91ac-aaded0fdecba",
                            Email = "kaynejagtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kayne",
                            LastName = "Jagtenberg",
                            LockoutEnabled = false,
                            Name = "Kayne Jagtenberg",
                            NormalizedEmail = "kaynejagtenberg@example.com",
                            NormalizedUserName = "kaynejagtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEPX7R5aYxrsV1jpOc52fLRODrVvxjjrX7IHNME9zkU1BuRgGTGFfjm8ZsB/bbsyZwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "baedb2f6-4643-47ef-b165-d6f35d5f0d33",
                            TwoFactorEnabled = false,
                            UserName = "kaynejagtenberg"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d0cf03-65ed-4abd-b9be-1370041b3778",
                            Email = "siebrigjeabdi@example.com",
                            EmailConfirmed = false,
                            FirstName = "Siebrigje",
                            LastName = "Abdi",
                            LockoutEnabled = false,
                            Name = "Siebrigje Abdi",
                            NormalizedEmail = "siebrigjeabdi@example.com",
                            NormalizedUserName = "siebrigjeabdi",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5tvJ9Qr7umVjrGvTlaHY+xPXpm7Jrd27qS7tZRqE3jfdYJnPlB3TZM8VHamx2ZNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79409a68-bd39-4bea-922a-25973e92dad8",
                            TwoFactorEnabled = false,
                            UserName = "siebrigjeabdi"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13d9f965-99d6-4d3b-bfac-30a7a3497e81",
                            Email = "sterrelambert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sterre",
                            LastName = "Lambert",
                            LockoutEnabled = false,
                            Name = "Sterre Lambert",
                            NormalizedEmail = "sterrelambert@example.com",
                            NormalizedUserName = "sterrelambert",
                            PasswordHash = "AQAAAAEAACcQAAAAENOcyVJwCddRPVMUNQATjvThqMYEOMybH4mXBoRNeNo8bcFE0Tx6D6uEk8ZnLJt+nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ecf7d05-3706-4d00-8cf7-d34d06947f8e",
                            TwoFactorEnabled = false,
                            UserName = "sterrelambert"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6898138-60e9-417f-999a-981e17e515fe",
                            Email = "milicavandergouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            LastName = "Van der Gouw",
                            LockoutEnabled = false,
                            Name = "Milica Van der Gouw",
                            NormalizedEmail = "milicavandergouw@example.com",
                            NormalizedUserName = "milicavandergouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEIyhDWRc4SQ9l31SCFnpm8SWfPfVc585punw7Ul44+K8h0B3pTsCUxqwwx3oVElKnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1eba1ec-5c0c-45b9-8085-38caf59eb39c",
                            TwoFactorEnabled = false,
                            UserName = "milicavandergouw"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05b3caeb-def7-4eef-baa9-d88759134f1c",
                            Email = "yvonbrussaard@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yvon",
                            LastName = "Brussaard",
                            LockoutEnabled = false,
                            Name = "Yvon Brussaard",
                            NormalizedEmail = "yvonbrussaard@example.com",
                            NormalizedUserName = "yvonbrussaard",
                            PasswordHash = "AQAAAAEAACcQAAAAEIcPofqWrm3KbC7dPoKu15Ur3ea7+P0zhViAuIuxV6HB2tIW6+x3YKUqqxusg6OakQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d4301ae-f302-4dfb-839e-52062d577514",
                            TwoFactorEnabled = false,
                            UserName = "yvonbrussaard"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcaeaad7-5e98-4f9e-8c03-4bf2f34aad78",
                            Email = "bodhidatema@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bodhi",
                            LastName = "Datema",
                            LockoutEnabled = false,
                            Name = "Bodhi Datema",
                            NormalizedEmail = "bodhidatema@example.com",
                            NormalizedUserName = "bodhidatema",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaITH77cE0cToPhxhpW5eGmnneVBonOKV0G13XsnJftAznDtSE9v7AMcRutShwCiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867cd4c5-75e5-4c3e-944f-7514f7aa8a73",
                            TwoFactorEnabled = false,
                            UserName = "bodhidatema"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a61b606f-34af-4124-b452-199733cfe891",
                            Email = "noachschutrups@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noach",
                            LastName = "Schutrups",
                            LockoutEnabled = false,
                            Name = "Noach Schutrups",
                            NormalizedEmail = "noachschutrups@example.com",
                            NormalizedUserName = "noachschutrups",
                            PasswordHash = "AQAAAAEAACcQAAAAEGKpRn3pWbfUlJYjnfcE8IQK0HAD6hYS2sZC8ZWqMWQHk8h+ZxwAvwgxABQ0xo3GNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce26a923-0670-46ca-99e0-3fcdbf201ca5",
                            TwoFactorEnabled = false,
                            UserName = "noachschutrups"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ed39d3f-cafc-4c6e-8b58-1f66f9ae358a",
                            Email = "ouassimbekking@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ouassim",
                            LastName = "Bekking",
                            LockoutEnabled = false,
                            Name = "Ouassim Bekking",
                            NormalizedEmail = "ouassimbekking@example.com",
                            NormalizedUserName = "ouassimbekking",
                            PasswordHash = "AQAAAAEAACcQAAAAEHS7gbSp7BCPFxHf/pvopJKB4xC6Z51y+HsZkJK0TnJwQjfakok4m6IM4d3u+DxWrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27539f4b-72db-4c16-b010-18e4575881bb",
                            TwoFactorEnabled = false,
                            UserName = "ouassimbekking"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "728fa57c-cac7-4e15-a6f7-b8a7c2e0d087",
                            Email = "noervanderkruit@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noer",
                            LastName = "Van der Kruit",
                            LockoutEnabled = false,
                            Name = "Noer Van der Kruit",
                            NormalizedEmail = "noervanderkruit@example.com",
                            NormalizedUserName = "noervanderkruit",
                            PasswordHash = "AQAAAAEAACcQAAAAEC06VJjQnTtrBfqIPmZF0oDMv8YDi3CHELHjfE2iODog0xz6ebSzVyMmCQ9zvqae7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cbacbaad-7548-40e4-96ab-a29c6f2dcdae",
                            TwoFactorEnabled = false,
                            UserName = "noervanderkruit"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a822044-c9e4-44ba-bc34-2952d1608c7b",
                            Email = "kaanvanmaarseveen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaan",
                            LastName = "Van Maarseveen",
                            LockoutEnabled = false,
                            Name = "Kaan Van Maarseveen",
                            NormalizedEmail = "kaanvanmaarseveen@example.com",
                            NormalizedUserName = "kaanvanmaarseveen",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5Yz6xDhjtDQcKU9EC6hml1kD94febKjDLcFMvDNfXo+a7xndEIPC0g6gVFlwNUwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "627b188c-7742-4ccb-b965-57003afe16bf",
                            TwoFactorEnabled = false,
                            UserName = "kaanvanmaarseveen"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ee5afd7-9d21-404a-ac60-6e0b16fb2599",
                            Email = "owenkaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Kaal",
                            LockoutEnabled = false,
                            Name = "Owen Kaal",
                            NormalizedEmail = "owenkaal@example.com",
                            NormalizedUserName = "owenkaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEPas9qMHPpjgUsDgK4OYrZW5Wznr8nlkBSGv4RQH7NE/5tkQ5VwxbJbS1yT0VMPQog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe135693-385a-4257-97f2-c8bdbb9ae42e",
                            TwoFactorEnabled = false,
                            UserName = "owenkaal"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95969151-08c3-4c9f-8387-24409cc75718",
                            Email = "paulinebah@example.com",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "Bah",
                            LockoutEnabled = false,
                            Name = "Pauline Bah",
                            NormalizedEmail = "paulinebah@example.com",
                            NormalizedUserName = "paulinebah",
                            PasswordHash = "AQAAAAEAACcQAAAAEBN68TcMLPMndn/rcpHiiW2fYkcCB+MdtSQRI+N7jSf/k0ns19M/G5z/iLCPh4jdZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "200e1fdd-3e46-481b-a6fc-1278d626c857",
                            TwoFactorEnabled = false,
                            UserName = "paulinebah"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aadaac46-1d18-4812-8af5-d01e76869c9e",
                            Email = "caterinatas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Caterina",
                            LastName = "Tas",
                            LockoutEnabled = false,
                            Name = "Caterina Tas",
                            NormalizedEmail = "caterinatas@example.com",
                            NormalizedUserName = "caterinatas",
                            PasswordHash = "AQAAAAEAACcQAAAAEPE16nh1+ohlm3jBlfzNNiMgTWLClGy2YDXWi4sjzOGG2j/bRxrYG4TzPG5AILMOCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c95df06-2be1-48d8-92c9-789640cad0d9",
                            TwoFactorEnabled = false,
                            UserName = "caterinatas"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a439a1c-2cb7-4437-87d2-279d855e9ca5",
                            Email = "edtouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ed",
                            LastName = "Touw",
                            LockoutEnabled = false,
                            Name = "Ed Touw",
                            NormalizedEmail = "edtouw@example.com",
                            NormalizedUserName = "edtouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/mFsmJWKge2c1wyYGGftqjYeUxBApw9Slj5SZ9JzugYcmkzv75Dev7F6QmcODwYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11f807e9-91a2-4aa5-851b-3f8fdaec6c86",
                            TwoFactorEnabled = false,
                            UserName = "edtouw"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cf0ed21-0e57-4d2c-9744-f7a8b9e4e715",
                            Email = "hugofidom@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hugo",
                            LastName = "Fidom",
                            LockoutEnabled = false,
                            Name = "Hugo Fidom",
                            NormalizedEmail = "hugofidom@example.com",
                            NormalizedUserName = "hugofidom",
                            PasswordHash = "AQAAAAEAACcQAAAAEBkU8jqWMKhClYq5j+6FixUO7BNJ/Av31j+Y+OxGT6oI/6zumbFIUISD5fE0gX0USA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06c89535-c4fb-4bd7-ab72-fc22d9e41dd0",
                            TwoFactorEnabled = false,
                            UserName = "hugofidom"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3a53afe-79a6-4d45-8c96-ca493b1108bf",
                            Email = "nannebesseling@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nanne",
                            LastName = "Besseling",
                            LockoutEnabled = false,
                            Name = "Nanne Besseling",
                            NormalizedEmail = "nannebesseling@example.com",
                            NormalizedUserName = "nannebesseling",
                            PasswordHash = "AQAAAAEAACcQAAAAEHyxUZ41mp+zn5rQdWQRHVqtRQeZEoQwQEvSkl2BC1HV3J9CwoEi9M/V4vrQ6EE1TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2dc1419-2eba-4e49-a67d-2b5232b2bc6d",
                            TwoFactorEnabled = false,
                            UserName = "nannebesseling"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54903e5e-1f40-42af-a4bc-9047fb8b6b94",
                            Email = "teunisjesalden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Teunisje",
                            LastName = "Salden",
                            LockoutEnabled = false,
                            Name = "Teunisje Salden",
                            NormalizedEmail = "teunisjesalden@example.com",
                            NormalizedUserName = "teunisjesalden",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXf9kKy1XjPks8uNe5UFKfXkSpigq0/sekGXmZ/OIwFKKgswmAO8dqdCh77elIGyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eda54fa4-4505-442e-95fe-79a80a74499d",
                            TwoFactorEnabled = false,
                            UserName = "teunisjesalden"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02de5540-d58a-428c-9d43-7024cd81342b",
                            Email = "rochedoornink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Roché",
                            LastName = "Doornink",
                            LockoutEnabled = false,
                            Name = "Roché Doornink",
                            NormalizedEmail = "rochedoornink@example.com",
                            NormalizedUserName = "rochedoornink",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3a2mlXdZn61m6FnZRekeWvASLENl9PydwogB1JkCBsGktMr0UcFB6o2yMJBmOIVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93e62a84-1853-4688-9973-d6f625a03e09",
                            TwoFactorEnabled = false,
                            UserName = "rochedoornink"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c53f94c2-6273-462f-949d-03b446603453",
                            Email = "yuenboertien@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yuen",
                            LastName = "Boertien",
                            LockoutEnabled = false,
                            Name = "Yuen Boertien",
                            NormalizedEmail = "yuenboertien@example.com",
                            NormalizedUserName = "yuenboertien",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsd2OhTsExLohFQ0vJcD6hxPL+xzKxWziaER6uoC+Tmw173PlSF9NjJ9KKXLHddcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59715bb0-68ae-4b02-b202-3ed595779bf2",
                            TwoFactorEnabled = false,
                            UserName = "yuenboertien"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe48f7c6-e615-4de9-b32b-346560e2c4f4",
                            Email = "heinrichmook@example.com",
                            EmailConfirmed = false,
                            FirstName = "Heinrich",
                            LastName = "Mook",
                            LockoutEnabled = false,
                            Name = "Heinrich Mook",
                            NormalizedEmail = "heinrichmook@example.com",
                            NormalizedUserName = "heinrichmook",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJArh5dubF/KObTD7IHe27wgBAZhMKt87dVBc60Waxk4OMI5+Ke7CogDZq0666hbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b5c28cb-d243-4722-853b-ffe610d237ca",
                            TwoFactorEnabled = false,
                            UserName = "heinrichmook"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ea42ab7-854b-4f27-a27e-281912eb8726",
                            Email = "keriantonisse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Keri",
                            LastName = "Antonisse",
                            LockoutEnabled = false,
                            Name = "Keri Antonisse",
                            NormalizedEmail = "keriantonisse@example.com",
                            NormalizedUserName = "keriantonisse",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUkq115WiqhQUkj2jK4B5jIhtM2S+pdv9ZgoYFOf1rf9g116w90CrEI+XGX1xhviw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ad4eeae-15dd-4c36-91c8-75c6407ec17f",
                            TwoFactorEnabled = false,
                            UserName = "keriantonisse"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7247ad18-aefb-4a87-b287-87091fa94659",
                            Email = "beerrebergen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Beer",
                            LastName = "Rebergen",
                            LockoutEnabled = false,
                            Name = "Beer Rebergen",
                            NormalizedEmail = "beerrebergen@example.com",
                            NormalizedUserName = "beerrebergen",
                            PasswordHash = "AQAAAAEAACcQAAAAEAc3bJ7ZJEYlQcxHh+tBs3hdspEowmxjfUql4NzZZuVbDn9E7B/ggi2lCrmcR2L//w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6970d57-a772-4081-ba22-d3f38ee8e4af",
                            TwoFactorEnabled = false,
                            UserName = "beerrebergen"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d902891b-2f4f-4150-8685-a6d4e4a5ace1",
                            Email = "kainvandergun@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaïn",
                            LastName = "Van der Gun",
                            LockoutEnabled = false,
                            Name = "Kaïn Van der Gun",
                            NormalizedEmail = "kainvandergun@example.com",
                            NormalizedUserName = "kainvandergun",
                            PasswordHash = "AQAAAAEAACcQAAAAELnxar9rklY8T+Y7eXuI43mBWerC591AD46ZAK8R5pTryoFdAgdVfhFYU6RJNsUaxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f232687-4754-4c0c-8c7a-240627992642",
                            TwoFactorEnabled = false,
                            UserName = "kainvandergun"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdc95d93-a14d-4527-93b4-031de94df594",
                            Email = "marloeswesterdijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marloes",
                            LastName = "Westerdijk",
                            LockoutEnabled = false,
                            Name = "Marloes Westerdijk",
                            NormalizedEmail = "marloeswesterdijk@example.com",
                            NormalizedUserName = "marloeswesterdijk",
                            PasswordHash = "AQAAAAEAACcQAAAAENl7U2dkrCTmBSYWtJveZfksOV+OuPxqwCgyS2V8oHLfzIkc1leG9sSBipTfDaagSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e8f9d98-8a81-45a0-a610-d136c3abde25",
                            TwoFactorEnabled = false,
                            UserName = "marloeswesterdijk"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "032dca53-b7c4-4ff3-b00c-676965998407",
                            Email = "aurelieesajas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aurélie",
                            LastName = "Esajas",
                            LockoutEnabled = false,
                            Name = "Aurélie Esajas",
                            NormalizedEmail = "aurelieesajas@example.com",
                            NormalizedUserName = "aurelieesajas",
                            PasswordHash = "AQAAAAEAACcQAAAAEOyhhRfXiq4acKgOT8TlEB612ggrAnY5X/HPWBSKy1C+5KCORl32o8X99zzWVo+s2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94e5eb82-abd2-4916-87cd-cd869d5adf64",
                            TwoFactorEnabled = false,
                            UserName = "aurelieesajas"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6263288-0aa6-4979-acf5-13cb2a2f4663",
                            Email = "gerlindenooijens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gerlinde",
                            LastName = "Nooijens",
                            LockoutEnabled = false,
                            Name = "Gerlinde Nooijens",
                            NormalizedEmail = "gerlindenooijens@example.com",
                            NormalizedUserName = "gerlindenooijens",
                            PasswordHash = "AQAAAAEAACcQAAAAENVsNrsz8nLoUL47YoDBZwl55/mnEKmawq42f+nv0V4QiIdPAi9ItEgLTLAykExCqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b23859ea-5e74-4dfd-befb-fd2df0f0a482",
                            TwoFactorEnabled = false,
                            UserName = "gerlindenooijens"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4358ddc-efd3-4fab-a05a-4959ed7d96ff",
                            Email = "summerbrinkhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Summer",
                            LastName = "Brinkhuis",
                            LockoutEnabled = false,
                            Name = "Summer Brinkhuis",
                            NormalizedEmail = "summerbrinkhuis@example.com",
                            NormalizedUserName = "summerbrinkhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEH8m3SL/eknlo6w189zHcoaSS8YRrLhcVZaITzSYwhRF3b8+znLc0nbt/ZZuv3f12g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61e5bc96-8b15-496a-9d51-7f3a7eb2827d",
                            TwoFactorEnabled = false,
                            UserName = "summerbrinkhuis"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce4529fa-133f-4095-b815-37228ac92ab9",
                            Email = "quirinavandusschoten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Quirina",
                            LastName = "Van Dusschoten",
                            LockoutEnabled = false,
                            Name = "Quirina Van Dusschoten",
                            NormalizedEmail = "quirinavandusschoten@example.com",
                            NormalizedUserName = "quirinavandusschoten",
                            PasswordHash = "AQAAAAEAACcQAAAAEKUzNA/bSg5WcLW1/a7mXQcrDZDHy1UwZVbsa7K2VdMTDMwSYSWnLDGncezG57WqmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "688e2151-d5e6-4eaa-ad45-c361959f1a90",
                            TwoFactorEnabled = false,
                            UserName = "quirinavandusschoten"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7b243d4-fb21-4072-aa33-2ce375ab37bd",
                            Email = "emmelienhandels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emmelien",
                            LastName = "Handels",
                            LockoutEnabled = false,
                            Name = "Emmelien Handels",
                            NormalizedEmail = "emmelienhandels@example.com",
                            NormalizedUserName = "emmelienhandels",
                            PasswordHash = "AQAAAAEAACcQAAAAELDepxczXvE0sC6K7Jgax0AuRcYj5KY6wpVBeibR23d50ij9wmOvpBxPPwlGcNOq1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8d6566c-3723-4eff-a549-9d9c60c4e738",
                            TwoFactorEnabled = false,
                            UserName = "emmelienhandels"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7289678c-6515-4fc8-b09f-21b92fe7f4e1",
                            Email = "wensleycurvers@example.com",
                            EmailConfirmed = false,
                            FirstName = "Wensley",
                            LastName = "Curvers",
                            LockoutEnabled = false,
                            Name = "Wensley Curvers",
                            NormalizedEmail = "wensleycurvers@example.com",
                            NormalizedUserName = "wensleycurvers",
                            PasswordHash = "AQAAAAEAACcQAAAAEAtqzyRXrnsvXloY2URsLDtt6IfuR5FzQtdzkHd9vifvoUptEHmTL6PJlrjXgueqdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8feb0fd-f9b8-48d0-9a5e-402d497debe6",
                            TwoFactorEnabled = false,
                            UserName = "wensleycurvers"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6284039-ea1c-4839-9259-885aced23c90",
                            Email = "dawidvanaart@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dawid",
                            LastName = "Van Aart",
                            LockoutEnabled = false,
                            Name = "Dawid Van Aart",
                            NormalizedEmail = "dawidvanaart@example.com",
                            NormalizedUserName = "dawidvanaart",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJs+fBfewlBuqMqgAdtcvwDim6JPM/RtkN6Ih10FDg1JMyxtortqBSsK9B8WQAJBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf77c816-ffb6-4ef1-b4d9-1fa349f7d973",
                            TwoFactorEnabled = false,
                            UserName = "dawidvanaart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "8594c432-9443-455c-aa23-59aabaff88d1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "168efd2a-75b0-4ac7-b057-5121717821ef",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "b0a1e7ec-2378-4eed-86ef-d516b86f1804",
                            Name = "Studiebegeleider",
                            NormalizedName = "STUDIEBEGELEIDER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "0f265fe4-627a-4df4-8d60-ae54265bc5f6",
                            Name = "Moduleverantwoordelijke",
                            NormalizedName = "MODULEVERANTWOORDELIJKE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "23",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "24",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "25",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "26",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "27",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "28",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "29",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "30",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "35",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "36",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "37",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "39",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "43",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
