// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230605203406_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 5
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 6
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 7
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 8
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 999
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studiebegeleider"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moduleverantwoordelijke"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Semester Item 5",
                            Name = "Semester Item 5",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Semester Item 6",
                            Name = "Semester Item 6",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Semester Item 7",
                            Name = "Semester Item 7",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Semester Item 8",
                            Name = "Semester Item 8",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 999,
                            Description = "Reparatiesemester",
                            Name = "Reparatiesemester",
                            Semester = 1,
                            YearJson = "[1,2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            Semester = 2,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 4,
                            Semester = 2,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 5,
                            Semester = 1,
                            SemesterItemId = 5,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 6,
                            Semester = 2,
                            SemesterItemId = 6,
                            StudyRouteId = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 7,
                            Semester = 1,
                            SemesterItemId = 7,
                            StudyRouteId = 1,
                            Year = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccd5b25e-a230-4831-9729-15d333db3090",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGvM+de233XPuOQIuectMSga5jOk3MDKB/TMDCBUydVEWEdIjrKxaeVaVWIj0Sf2A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "968d9d1d-d323-4503-a45b-9d279be3533c",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+mwdNLiz9IdGy2D2An89Kqwpl/dXjSdvsd/CRBugfvhY6ST6jxaoXOz4UuqztGzQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a8f8739-2768-4d90-9e77-cd54df7cebf7",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            PasswordHash = "AQAAAAEAACcQAAAAENVLJP5FBCZGtpqAebnnOfEq6ylerUm9R29TzJGR7n4onLedTXpu8Owcz15wNa/L/A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "097b31db-47ca-4942-adb0-822506144702",
                            Email = "cloekras@example.com",
                            EmailConfirmed = false,
                            FirstName = "Cloé",
                            LastName = "Kras",
                            LockoutEnabled = false,
                            Name = "Cloé Kras",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtmLv9rwtTpHWylVCxMv2g5rH8zuUZpIlUYJg3NJuoQZGjssbmVyZBI0U22UaTDXQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "cloekras@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ba86fea-f648-4f9a-b34e-ade4ebd2e281",
                            Email = "maurivannuland@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mauri",
                            LastName = "Van Nuland",
                            LockoutEnabled = false,
                            Name = "Mauri Van Nuland",
                            PasswordHash = "AQAAAAEAACcQAAAAEN62Uny2XaSCKeYHyI7Y/46z59DjlRPJwGJamK3RuvdAuw8AMkkbCLt8/gqh6HL0UA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maurivannuland@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40041dd3-4498-44a7-b9e8-b553d4e26812",
                            Email = "jeromeheerink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jerome",
                            LastName = "Heerink",
                            LockoutEnabled = false,
                            Name = "Jerome Heerink",
                            PasswordHash = "AQAAAAEAACcQAAAAEApNW2EGY9JgD7zMHxIaP9eyrgZecDUstWtpefHwOoHhfK/II2UE1YfKVAZTAq/rEg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeromeheerink@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bacd4a4a-4ff5-40c7-abb7-7781ee0bd981",
                            Email = "semihvanburken@example.com",
                            EmailConfirmed = false,
                            FirstName = "Semih",
                            LastName = "Van Burken",
                            LockoutEnabled = false,
                            Name = "Semih Van Burken",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/mmXg4f5FgRqYouKZwDo01Jcyr9UH3bvms3DX08zP1u6M0pzTWE1Ov5ICyRAUweQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "semihvanburken@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6feb6258-e250-4e9a-bea0-e28050448a0a",
                            Email = "jacomijntjemoraal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jacomijntje",
                            LastName = "Moraal",
                            LockoutEnabled = false,
                            Name = "Jacomijntje Moraal",
                            PasswordHash = "AQAAAAEAACcQAAAAEFDwqycci/oVncNChmASWV8NgdoRZKdYKmR1SQE8lXLIMnFTwNAvu9oNqovXa7LfoA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacomijntjemoraal@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c4dd41a-f6a1-4fa9-a0f9-3c394b0e5d53",
                            Email = "sjuulalma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sjuul",
                            LastName = "Alma",
                            LockoutEnabled = false,
                            Name = "Sjuul Alma",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDJKv1a1nRMoCcVyVLmLnnWH89mCju59Pm/tIFBxMyI69LzcAWxUBHKTOTHoGPURw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sjuulalma@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e6e5b07-fa2e-4171-8550-bb5265b9dbe4",
                            Email = "sharonapouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sharona",
                            LastName = "Pouw",
                            LockoutEnabled = false,
                            Name = "Sharona Pouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEGXSz63SRUWgFYRx6BY2ZrJGCxnGA4q1hRFdWSglWXFRYMJfMauH0xtOmZe/xipiTA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sharonapouw@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "686776d0-8186-4e71-896e-9ba7fe1cc3fd",
                            Email = "ashwienabbenhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ashwien",
                            LastName = "Abbenhuis",
                            LockoutEnabled = false,
                            Name = "Ashwien Abbenhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEFWrPd9N31BVA+McUB5prNcTjIw65E/P/hUty+o4ew7kVa/tWlsf1GunpJr72huiNQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ashwienabbenhuis@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d985615-1ea1-4bc2-a07a-c3abb3cf508b",
                            Email = "raulverdaasdonk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raul",
                            LastName = "Verdaasdonk",
                            LockoutEnabled = false,
                            Name = "Raul Verdaasdonk",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/09CxCAL8uCfC8P1i+nlukJhpUjIgkfrLz4f5wfauOcrLMKDt5eOF/b82yhzab3w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raulverdaasdonk@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b47fea9c-e1d9-4776-8588-bcf169f462da",
                            Email = "majellawessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Majella",
                            LastName = "Wessels",
                            LockoutEnabled = false,
                            Name = "Majella Wessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+RkX8f4cX3jUvRUP650ejXmM0koWduEYsOt5omf3Zt99Pzum5sQAvMmUVAM9KHHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "majellawessels@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68007cd6-8871-4f3b-8beb-f0484103cff2",
                            Email = "kwintlogtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kwint",
                            LastName = "Logtenberg",
                            LockoutEnabled = false,
                            Name = "Kwint Logtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEDahxe8ErlX0ZLdT0yjWTKxknihiLSe2QxjE32lk7mIJYNSsyfmh6VXPmrGvbtWKdA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kwintlogtenberg@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4ed38e2-fe25-4cbc-a791-de737f8afdb2",
                            Email = "mikhaillebbink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mikhail",
                            LastName = "Lebbink",
                            LockoutEnabled = false,
                            Name = "Mikhail Lebbink",
                            PasswordHash = "AQAAAAEAACcQAAAAEAffMx/s7OZHRVQoXBuSrKzm7NzLSykzOOl/DiCm7AVA+vAOBMLS0oH4YzogphZYQA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikhaillebbink@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b4bac95-324f-41ef-ba88-cb6e430af920",
                            Email = "claylier@example.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Lier",
                            LockoutEnabled = false,
                            Name = "Clay Lier",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHnj6XKXprm0KCgS+5gDSjB7/TJA5/jG8+zncqeNL9fjs5g1pHI7s3KJxd/kURm3A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "claylier@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48c9300f-286b-4fc3-8f77-3b7030b9ec20",
                            Email = "rubinavanderhout@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rubina",
                            LastName = "Van der Hout",
                            LockoutEnabled = false,
                            Name = "Rubina Van der Hout",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaEq+gEVIlEPxSje5hclML86PLb7pBF8jGDcZC/iZMn+MHbh1rwJOLUn4sbcNCxeA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rubinavanderhout@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e656ade-fcee-4bd9-8083-c73a7e76c8f5",
                            Email = "abderrazakblaauwbroek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Abderrazak",
                            LastName = "Blaauwbroek",
                            LockoutEnabled = false,
                            Name = "Abderrazak Blaauwbroek",
                            PasswordHash = "AQAAAAEAACcQAAAAEA5b5tEUrlquWQlcx1PDKuu2Yxj1SA52cPZpbcdKbGDzci0qLiCUp/+ucl29oKL8pw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "abderrazakblaauwbroek@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdb0f05a-e38d-4dab-a097-7e6e1758b6ad",
                            Email = "yannikconsten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yannik",
                            LastName = "Consten",
                            LockoutEnabled = false,
                            Name = "Yannik Consten",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZnC6r3SGfkKbqKWiSyNchIKkMrs59Yo90S3YF1v3HAO5+tcgrMBsE6UPboBIORVg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yannikconsten@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "460bc0a9-cda3-4d35-ae12-defe14bbd041",
                            Email = "niniboekhoudt@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nini",
                            LastName = "Boekhoudt",
                            LockoutEnabled = false,
                            Name = "Nini Boekhoudt",
                            PasswordHash = "AQAAAAEAACcQAAAAEOFtHrH7ZccWw9DZApl3BAVZpbgTCi3BXcMoDlo8CMC2zqq6LGMpFOh5AVLVeabSzA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "niniboekhoudt@example.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21f13b47-0541-4b40-9659-3d148fb9fa6b",
                            Email = "mounssifborkent@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mounssif",
                            LastName = "Borkent",
                            LockoutEnabled = false,
                            Name = "Mounssif Borkent",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEZ9h0ZWUprD+33IfgnxVCmp7+MqQzc6udSWabWC6SmVrVSowLMjn8TqFuLIeIk/g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mounssifborkent@example.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e3d8287-daef-416e-900f-fd5f3ebdee15",
                            Email = "metjeknoef@example.com",
                            EmailConfirmed = false,
                            FirstName = "Metje",
                            LastName = "Knoef",
                            LockoutEnabled = false,
                            Name = "Metje Knoef",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKDC/BtEW4ftzpx9ulJqki8jccDIPIm58cq/g1MW1H0QZBfhGBZPDPjjCzDSzGW7g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "metjeknoef@example.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "269700d4-b0e3-4912-8f05-c610ba8e0641",
                            Email = "lolkjehagoort@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lolkje",
                            LastName = "Hagoort",
                            LockoutEnabled = false,
                            Name = "Lolkje Hagoort",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ8wz9YUfwl8qB3/Ce7ojjo+fYZVz1TcIprFO/REAqQ6amKhnvO6Yecyt/QoWxXxjg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lolkjehagoort@example.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fb6e859-3092-4650-b891-087ac93eaa06",
                            Email = "sabriadenissen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabria",
                            LastName = "Denissen",
                            LockoutEnabled = false,
                            Name = "Sabria Denissen",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2MS30b3wpZz0mLpa/8Isxc6yMlQQ3fvm17NWcHVWl6I7tBPkvgCpD3oyjdCZkJAA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabriadenissen@example.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37592073-4964-40d8-956e-b68f48c4f0d0",
                            Email = "farukvanschip@example.com",
                            EmailConfirmed = false,
                            FirstName = "Faruk",
                            LastName = "Van Schip",
                            LockoutEnabled = false,
                            Name = "Faruk Van Schip",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbPNWVkrggoI2iiCs3fGAqIj2+SX5v8hVHeIWg+2fVSQGiinX2hYONXzhAFB4XCgQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "farukvanschip@example.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cc9b725-21d6-4a9d-922d-29a2a0b89bfb",
                            Email = "zakariadraaisma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Zakaria",
                            LastName = "Draaisma",
                            LockoutEnabled = false,
                            Name = "Zakaria Draaisma",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRlrzi/61qr9+NaMknaAJDb9U7Opig8QMdNk3la9vjVPxzWzJIKmPxH5fZZ+Xhelw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "zakariadraaisma@example.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c289888f-3519-4057-9fb0-4154494709ba",
                            Email = "oguzheessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Oguz",
                            LastName = "Heessels",
                            LockoutEnabled = false,
                            Name = "Oguz Heessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+/gY8ZTfHCiEQvZCZkcj6/vrqoO7eMKH3wx/GSt0FbyEkCbNGxYmMwUqQYECrLhw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "oguzheessels@example.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0c3d9e8-fc3a-4e83-bf5f-6e12bd93736a",
                            Email = "mariaburggraaff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Burggraaff",
                            LockoutEnabled = false,
                            Name = "Maria Burggraaff",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+jZe+GqXHa1NPFC3vJykYnMcrobBct+rrOP/bYZGv3j2T0qkmGO+M3LcU/kiu+nQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mariaburggraaff@example.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0758c51-7740-4ebe-8359-1373a28bc496",
                            Email = "katelijnvandekoppel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Katelijn",
                            LastName = "Van de Koppel",
                            LockoutEnabled = false,
                            Name = "Katelijn Van de Koppel",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbCs5suT4aVlRiu03l5OC6YheOlSakElCj9G41edLhS6bWPAk2xTd/3jjliprgxXw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "katelijnvandekoppel@example.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e3f5e47-0bb9-40b3-8557-abd2c6f73144",
                            Email = "desirescheeren@example.com",
                            EmailConfirmed = false,
                            FirstName = "Désiré",
                            LastName = "Scheeren",
                            LockoutEnabled = false,
                            Name = "Désiré Scheeren",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQPlBwmdmQrAqbuSCq0+MW2sjvgZCbl4P+jr2Ey1NGlOtd98pXv1l8UkEjfbiL6Hw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "desirescheeren@example.com"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb8446eb-55b4-48aa-8a38-3d0c51479c96",
                            Email = "daxgabriel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Gabriel",
                            LockoutEnabled = false,
                            Name = "Dax Gabriel",
                            PasswordHash = "AQAAAAEAACcQAAAAECTAhNnNFqaI2ywXiJ6O9/zNIbHmw0HbGMbfE0QxCj4qLhtvGc2M1+GXY4NtUkAC6Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "daxgabriel@example.com"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e17756d-a7de-4050-bbf9-ded2367e8a53",
                            Email = "tommiestel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tommie",
                            LastName = "Stel",
                            LockoutEnabled = false,
                            Name = "Tommie Stel",
                            PasswordHash = "AQAAAAEAACcQAAAAEL68gbSDRv5dp8cN3cQyPidJvsf8L5iuvoD67NAMcF2PjU8o3fpDzvhGrjkgQSZ7XQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tommiestel@example.com"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0297dd36-3523-4c10-b605-949aad4ae44e",
                            Email = "raphaelkoppe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raphaël",
                            LastName = "Koppe",
                            LockoutEnabled = false,
                            Name = "Raphaël Koppe",
                            PasswordHash = "AQAAAAEAACcQAAAAEPkXCVzv+WCC4xkr/ZlvtRgM0YLo29FPkMvitg9Dn4v1ZSxQEICNjaFexESxCuzbng==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raphaelkoppe@example.com"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cc3c189-f07b-4864-972b-a7ce1456136b",
                            Email = "demyjongen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Demy",
                            LastName = "Jongen",
                            LockoutEnabled = false,
                            Name = "Demy Jongen",
                            PasswordHash = "AQAAAAEAACcQAAAAECFNlIbHM9BIkmSbas9/puNeKD5ECwkKvqmW3lU10XmVFuMkXmenhBf7CqC+lF5wvA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demyjongen@example.com"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af4821d5-0291-4761-999c-94ea8dc41064",
                            Email = "leahharreman@example.com",
                            EmailConfirmed = false,
                            FirstName = "Leah",
                            LastName = "Harreman",
                            LockoutEnabled = false,
                            Name = "Leah Harreman",
                            PasswordHash = "AQAAAAEAACcQAAAAEIWXXMgmxUkRv91GqgFJtKxWePx9pZ/OgkN1Rp5UAVH/TVPECNa1Ls4FtpyMpIXgRw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "leahharreman@example.com"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01c47fc8-055e-4158-85b0-c4f647df91d1",
                            Email = "idrisskorpershoek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Idriss",
                            LastName = "Korpershoek",
                            LockoutEnabled = false,
                            Name = "Idriss Korpershoek",
                            PasswordHash = "AQAAAAEAACcQAAAAEPAe8J0f2JFHlQk4e9NQZ5CaOBGfCUcuCrWZSam3VCY4ddXVhJGqUyFm6l+PobX+hQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "idrisskorpershoek@example.com"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "415cfc36-e887-44fb-9663-3e2761fdb90a",
                            Email = "rashiedbleumink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rashied",
                            LastName = "Bleumink",
                            LockoutEnabled = false,
                            Name = "Rashied Bleumink",
                            PasswordHash = "AQAAAAEAACcQAAAAEGv0Nle8ZGWgYyd3z04j99H7d8LkMHRcJ3X9Gj7DA2a9P0fsU+evTMYJ4JJbQn/3gA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rashiedbleumink@example.com"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e522da41-fd14-455e-9bfd-abad8ec0ead2",
                            Email = "siay@example.com",
                            EmailConfirmed = false,
                            FirstName = "Si",
                            LastName = "Ay",
                            LockoutEnabled = false,
                            Name = "Si Ay",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6RuZqscMmq/+qyW9WbJZ8qYjAFQb3E0L+UMuKrQyRh9axTPmv6AapSbqEtQ7jGQA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siay@example.com"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b7abe6a-9313-4d59-876a-4d88110813b3",
                            Email = "manolyalebens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Manolya",
                            LastName = "Lebens",
                            LockoutEnabled = false,
                            Name = "Manolya Lebens",
                            PasswordHash = "AQAAAAEAACcQAAAAEBFWER/AFTfc7na+Ief+VExmkKD9mQ8a/gbPOTij8mCb+/4tg2RV0t8ALOu7EwQ6WQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manolyalebens@example.com"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c0e8259-074d-4dfc-a2c1-c2aed0b81156",
                            Email = "mateuszmachielsen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Machielsen",
                            LockoutEnabled = false,
                            Name = "Mateusz Machielsen",
                            PasswordHash = "AQAAAAEAACcQAAAAEAB5bIuLKraIiY3gFn/0XnsQDQeGK80xzoKPJ0XesR4y50pH30nEWf++t+uak3mm1g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mateuszmachielsen@example.com"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5833e7a-3f0d-4c7f-b61a-5bb3215b0efd",
                            Email = "douaavandepavert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Douaa",
                            LastName = "Van de Pavert",
                            LockoutEnabled = false,
                            Name = "Douaa Van de Pavert",
                            PasswordHash = "AQAAAAEAACcQAAAAEHI754XMCa/RO1ZjGrUf2XJm1fQ2fmIFAzHLAwT41fgim2CSMKsOvtMZz0LKC+WwHA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "douaavandepavert@example.com"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1421db28-e462-4116-b1cd-965e4f2001e1",
                            Email = "kishanhoogkamp@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kishan",
                            LastName = "Hoogkamp",
                            LockoutEnabled = false,
                            Name = "Kishan Hoogkamp",
                            PasswordHash = "AQAAAAEAACcQAAAAEEYpX5JRSgdKRbhuARDocFsq1PUqIqwNt3NFRlCD+8ApQK6Ap2qvxnmlbK672zJGVA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kishanhoogkamp@example.com"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55f62875-a3da-4dd2-99fe-7c3974da26d9",
                            Email = "harmjanversendaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Harmjan",
                            LastName = "Versendaal",
                            LockoutEnabled = false,
                            Name = "Harmjan Versendaal",
                            PasswordHash = "AQAAAAEAACcQAAAAENnD4Glpd/Qd13YjiM87ysj6O3BJzkasbMxB/DJRzO6BmaHr8KKXo/FvEShrOHHsqQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "harmjanversendaal@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "4"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "5"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "6"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "7"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "8"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "9"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "10"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "11"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "12"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "13"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "14"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "15"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "16"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "17"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "18"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "19"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "20"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "21"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "22"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "23"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "24"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "25"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "26"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "27"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "28"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "29"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "30"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "31"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "32"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "33"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "34"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "35"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "36"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "37"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "38"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "39"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "40"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "41"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "42"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "43"
                        });
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
