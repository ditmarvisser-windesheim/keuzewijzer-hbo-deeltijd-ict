// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230607184506_securitystamps")]
    partial class securitystamps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c209aa9-1021-4b87-bf7d-c4c2bb93e243",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            NormalizedEmail = "admin@example.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAeyatbsi/FDMHltQ40EIeaX7PPISqS3JuZjhW4Zq46BFP4/sJmnmsEaIQdLA4LU9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5197e63-1935-452b-bc25-f72820151dd0",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "179157e5-67b0-4fa6-bd81-0a80c014c634",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            NormalizedEmail = "eugenevanroden@example.com",
                            NormalizedUserName = "eugenevanroden",
                            PasswordHash = "AQAAAAEAACcQAAAAEINIAgt1voawK/s08zww3BEG7dis5Gpopc2abG/S2UxAKZtILzAEIupCx4y+3YkdQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfc861d0-d215-44b2-87b0-0d7ed9e0991c",
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf5839c3-4f6f-4567-a989-6e7ee718a62a",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            NormalizedEmail = "theotan@example.com",
                            NormalizedUserName = "theotan",
                            PasswordHash = "AQAAAAEAACcQAAAAEDZC2f+703cXJqey/ViXh6e04fF2OMBoe4pQwDZgVElQBc4VXEPwkVuUKB9C6RKsIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9266c34a-f29a-40d9-b607-c760d2b7c5fd",
                            TwoFactorEnabled = false,
                            UserName = "theotan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77db9fc9-d449-4347-a621-2aae639eb4c2",
                            Email = "floruscicek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Florus",
                            LastName = "Çiçek",
                            LockoutEnabled = false,
                            Name = "Florus Çiçek",
                            NormalizedEmail = "floruscicek@example.com",
                            NormalizedUserName = "floruscicek",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxjtgOXyfebRadgt+jUQB7Qua12cUXz3osSbt4WZ0bgMu034Nii7E2p33RL89wsig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53a2d423-c9e4-44e2-8cce-4d75b360ee6a",
                            TwoFactorEnabled = false,
                            UserName = "floruscicek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd36100d-4394-4102-90fe-baf8aa96961d",
                            Email = "marlenewolf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlène",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            Name = "Marlène Wolf",
                            NormalizedEmail = "marlenewolf@example.com",
                            NormalizedUserName = "marlenewolf",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0u80JPqpyvPr7Pww8n4GCRDp+GHXDvY3wS2OdKj4mxsID/DCc6zGuDsPy/nbnvvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e429ffdd-7ce3-40e1-8390-732249ab35dc",
                            TwoFactorEnabled = false,
                            UserName = "marlenewolf"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da5a543e-ca03-49ad-bb4d-ffedf7f86e69",
                            Email = "bilalsteentjes@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bilal",
                            LastName = "Steentjes",
                            LockoutEnabled = false,
                            Name = "Bilal Steentjes",
                            NormalizedEmail = "bilalsteentjes@example.com",
                            NormalizedUserName = "bilalsteentjes",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrfpw8IQeO3iocx444ypHCX222gpcNVjp9kwZBKc5e1qx9/5PZOukEhN+0IudIRnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0de4ed63-5f06-48c2-a3e7-9de5d4f31287",
                            TwoFactorEnabled = false,
                            UserName = "bilalsteentjes"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df0b069d-1f0c-4cf3-b194-d886def51a68",
                            Email = "marlijngiebels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlijn",
                            LastName = "Giebels",
                            LockoutEnabled = false,
                            Name = "Marlijn Giebels",
                            NormalizedEmail = "marlijngiebels@example.com",
                            NormalizedUserName = "marlijngiebels",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqa5ExB7CAKA5mZrSKCzdqcksJK67/uNzseHE4nqskC91EIsicuHXJo5e7LuA50qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e875988f-7ceb-41ad-b7f9-cc428348ea01",
                            TwoFactorEnabled = false,
                            UserName = "marlijngiebels"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdf68eda-f73a-4b15-a5e1-8f98ffd241ac",
                            Email = "sabrivandereijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabri",
                            LastName = "Van der Eijk",
                            LockoutEnabled = false,
                            Name = "Sabri Van der Eijk",
                            NormalizedEmail = "sabrivandereijk@example.com",
                            NormalizedUserName = "sabrivandereijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6LXmc6THkzoZ9eLCtDIyeXP8yRhBNylb2Scs6+vxAT54t3P1JAcqNC+XjnbtrR/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "378a065c-5d64-4d33-884f-7140851eb048",
                            TwoFactorEnabled = false,
                            UserName = "sabrivandereijk"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0aeb413-2655-4e28-a452-cb86b8d5f688",
                            Email = "caseyandriesse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Casey",
                            LastName = "Andriesse",
                            LockoutEnabled = false,
                            Name = "Casey Andriesse",
                            NormalizedEmail = "caseyandriesse@example.com",
                            NormalizedUserName = "caseyandriesse",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLrh+x9v0u4yt0bHHLT9SBZflHirRCX4LJZuFL6NcGsUmcQ9rN+2bVJ2zP/48xC7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e576c053-3dcf-4e1d-9d2a-2cc4e036e728",
                            TwoFactorEnabled = false,
                            UserName = "caseyandriesse"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8c6c6b7-0094-4761-a728-5bd2edcca873",
                            Email = "nikhuijskens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LastName = "Huijskens",
                            LockoutEnabled = false,
                            Name = "Nik Huijskens",
                            NormalizedEmail = "nikhuijskens@example.com",
                            NormalizedUserName = "nikhuijskens",
                            PasswordHash = "AQAAAAEAACcQAAAAEIxSWpbLhOvd+52a9RpHirzWTlz3N7aW1KZxSGrrXvVAE49pKK3tYPUdAGqTkCVuVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d48edaae-65dd-4e70-ab48-8f0e39a440a0",
                            TwoFactorEnabled = false,
                            UserName = "nikhuijskens"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81a3b540-1fc8-4f2e-8541-a9bd5614d518",
                            Email = "duranpetiet@example.com",
                            EmailConfirmed = false,
                            FirstName = "Duran",
                            LastName = "Petiet",
                            LockoutEnabled = false,
                            Name = "Duran Petiet",
                            NormalizedEmail = "duranpetiet@example.com",
                            NormalizedUserName = "duranpetiet",
                            PasswordHash = "AQAAAAEAACcQAAAAENNxhWJ5+siuZWGsLqrY5buelN4bTrrBWl5zhJoL3E+1/3Zb/mfESWTZ1daSz2KyIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b538196c-b87b-4931-a665-c0f1f46d0ecb",
                            TwoFactorEnabled = false,
                            UserName = "duranpetiet"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "516803b7-2c14-4bba-bc76-e6242a017ccc",
                            Email = "veroniekbravenboer@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veroniek",
                            LastName = "Bravenboer",
                            LockoutEnabled = false,
                            Name = "Veroniek Bravenboer",
                            NormalizedEmail = "veroniekbravenboer@example.com",
                            NormalizedUserName = "veroniekbravenboer",
                            PasswordHash = "AQAAAAEAACcQAAAAEOg+ekrOmnMKizgBy+qq+/5Hje4/rMzIBhzxfyOTHnUdX0W4mVlX4wIASvi/dLWwlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6b74a88-01ec-4109-8ff6-1891351ae779",
                            TwoFactorEnabled = false,
                            UserName = "veroniekbravenboer"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db0d1b9f-45bd-403a-a7d7-3c8b7bcc7c4d",
                            Email = "kaynejagtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kayne",
                            LastName = "Jagtenberg",
                            LockoutEnabled = false,
                            Name = "Kayne Jagtenberg",
                            NormalizedEmail = "kaynejagtenberg@example.com",
                            NormalizedUserName = "kaynejagtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAECYdabkZIwyMiBsukAwFlRom7mARfYGqlC52Gs6wcaXieBugLrWq9pdW+iOjbdxeXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d94e955a-6264-4c9d-95cf-ccf7bb6b9ba4",
                            TwoFactorEnabled = false,
                            UserName = "kaynejagtenberg"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c777f0fa-0c09-41fa-9bfa-b9657d3e80fc",
                            Email = "siebrigjeabdi@example.com",
                            EmailConfirmed = false,
                            FirstName = "Siebrigje",
                            LastName = "Abdi",
                            LockoutEnabled = false,
                            Name = "Siebrigje Abdi",
                            NormalizedEmail = "siebrigjeabdi@example.com",
                            NormalizedUserName = "siebrigjeabdi",
                            PasswordHash = "AQAAAAEAACcQAAAAEIdGuVRYIzf8lHQWoaJ5feW06+on1xF8zZVSEDsJoVaFlAIl4+DCRn7wLTwaDc9BSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7b80ccb-d141-4133-a457-8ee95645fbb7",
                            TwoFactorEnabled = false,
                            UserName = "siebrigjeabdi"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b3796a8-9cfd-4945-b9c3-86f1561732cc",
                            Email = "sterrelambert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sterre",
                            LastName = "Lambert",
                            LockoutEnabled = false,
                            Name = "Sterre Lambert",
                            NormalizedEmail = "sterrelambert@example.com",
                            NormalizedUserName = "sterrelambert",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXAWlJBtN8KEJEJUYWKafKYJQXz6szUcnCCObTJy7yon+UXUZweAUUzC3wp5+Dg9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6851d434-6dec-45e1-b9d6-fca1bd5f90b0",
                            TwoFactorEnabled = false,
                            UserName = "sterrelambert"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64172856-347a-4e4b-8ec5-d845da743772",
                            Email = "milicavandergouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            LastName = "Van der Gouw",
                            LockoutEnabled = false,
                            Name = "Milica Van der Gouw",
                            NormalizedEmail = "milicavandergouw@example.com",
                            NormalizedUserName = "milicavandergouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEPJ0fRMRjMaWd8+bKkK1IdHNodjh59g+dhCqSaclxewwp+Wm0FA4Ggof2B7qG2L56w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eaaf693e-24ac-4615-887d-5a87e1dc6d51",
                            TwoFactorEnabled = false,
                            UserName = "milicavandergouw"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a511f357-1f06-4cd7-bbfb-222ce2d6ce30",
                            Email = "yvonbrussaard@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yvon",
                            LastName = "Brussaard",
                            LockoutEnabled = false,
                            Name = "Yvon Brussaard",
                            NormalizedEmail = "yvonbrussaard@example.com",
                            NormalizedUserName = "yvonbrussaard",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfa0cCs0cjiRZ3jzp2H1zmIMUwknoXvHhCtXRRZS4vQooLDkqQwWXZlzs6Ur2dbkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "068a053e-ef33-4408-afa9-0d01bea1bdb6",
                            TwoFactorEnabled = false,
                            UserName = "yvonbrussaard"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04f829c5-b263-41fb-8903-edbaab1d6460",
                            Email = "bodhidatema@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bodhi",
                            LastName = "Datema",
                            LockoutEnabled = false,
                            Name = "Bodhi Datema",
                            NormalizedEmail = "bodhidatema@example.com",
                            NormalizedUserName = "bodhidatema",
                            PasswordHash = "AQAAAAEAACcQAAAAEE5DFIvWKYBhx1CKbn9jKjM36Ngzn38Lnf9DJ07Z+Q3zOh9JvB+rlxxl0B9cM1Iqzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23f7280b-a99e-46de-bbb6-f2f279abed96",
                            TwoFactorEnabled = false,
                            UserName = "bodhidatema"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd1fbc9d-0f66-4224-9f64-7fece90a5009",
                            Email = "noachschutrups@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noach",
                            LastName = "Schutrups",
                            LockoutEnabled = false,
                            Name = "Noach Schutrups",
                            NormalizedEmail = "noachschutrups@example.com",
                            NormalizedUserName = "noachschutrups",
                            PasswordHash = "AQAAAAEAACcQAAAAEN8/ovap/bR1q3LNQMl0dvw5NZXymE0g2hrZO69zaqMXP4Ubafjmd46I+oU2vkyGeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a26c76a-e75e-44b9-b6c2-42881c792367",
                            TwoFactorEnabled = false,
                            UserName = "noachschutrups"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7fdebca-4691-4539-84bb-6416e7155578",
                            Email = "ouassimbekking@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ouassim",
                            LastName = "Bekking",
                            LockoutEnabled = false,
                            Name = "Ouassim Bekking",
                            NormalizedEmail = "ouassimbekking@example.com",
                            NormalizedUserName = "ouassimbekking",
                            PasswordHash = "AQAAAAEAACcQAAAAEOEbft+nDwwTtnJVZLKfdbHjGhCDPJrOjqvvxdgfXkJJEStav1l4EHCd6vBLEB6c0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d35a13c-8bac-4146-b7ee-bab7123983df",
                            TwoFactorEnabled = false,
                            UserName = "ouassimbekking"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0632bbdb-dab7-4a14-a818-56c9df8f0533",
                            Email = "noervanderkruit@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noer",
                            LastName = "Van der Kruit",
                            LockoutEnabled = false,
                            Name = "Noer Van der Kruit",
                            NormalizedEmail = "noervanderkruit@example.com",
                            NormalizedUserName = "noervanderkruit",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHttZwgs51v2thLOTETyKYaztgF2DKL1AG64WlfPPXEAqp8oalQl6QQnJuxKoSdxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "272e9fee-5299-44d3-a020-28d22ddc404a",
                            TwoFactorEnabled = false,
                            UserName = "noervanderkruit"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ab540f6-8342-46e8-bae3-8ca54a0218f5",
                            Email = "kaanvanmaarseveen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaan",
                            LastName = "Van Maarseveen",
                            LockoutEnabled = false,
                            Name = "Kaan Van Maarseveen",
                            NormalizedEmail = "kaanvanmaarseveen@example.com",
                            NormalizedUserName = "kaanvanmaarseveen",
                            PasswordHash = "AQAAAAEAACcQAAAAEI9EAbPAndZcboJckW0+RkjkSajZSXVyGib+FtUoXNrOHGGrzZfy4I0x064KjROECw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "653f5bd6-4e2f-43ff-8a3a-c74326a92b81",
                            TwoFactorEnabled = false,
                            UserName = "kaanvanmaarseveen"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05221e0b-1068-4eb7-aee4-7ffd02355c7f",
                            Email = "owenkaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Kaal",
                            LockoutEnabled = false,
                            Name = "Owen Kaal",
                            NormalizedEmail = "owenkaal@example.com",
                            NormalizedUserName = "owenkaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5af3Do+pKvNg7mqaFZ9uO3JMgU0YFWP8kwxY2upprI9oOH7EwLAUHvmro7iXtbIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c58690f8-3f3b-467e-af9e-78ac87acb27b",
                            TwoFactorEnabled = false,
                            UserName = "owenkaal"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "919a5256-a566-48ac-a893-43441de58a34",
                            Email = "paulinebah@example.com",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "Bah",
                            LockoutEnabled = false,
                            Name = "Pauline Bah",
                            NormalizedEmail = "paulinebah@example.com",
                            NormalizedUserName = "paulinebah",
                            PasswordHash = "AQAAAAEAACcQAAAAEJa4EX0XnNyKdcvlbxpuvr1VpBFnymNrrauo2EqB6RQLycE1Zy8RBOo9CMgPMbmxEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfc8e33c-9426-4ab3-8823-8ec6562cecb2",
                            TwoFactorEnabled = false,
                            UserName = "paulinebah"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8b94d7-2c16-4c63-9ee3-80b6aa5a2b8b",
                            Email = "caterinatas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Caterina",
                            LastName = "Tas",
                            LockoutEnabled = false,
                            Name = "Caterina Tas",
                            NormalizedEmail = "caterinatas@example.com",
                            NormalizedUserName = "caterinatas",
                            PasswordHash = "AQAAAAEAACcQAAAAECrz9KtkAKMAMCwUTbsxW1HJGqaWWIZGgonhJeAapZ5rin6S8Be1fH9syMANk3ot8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20c524bb-564f-459b-a9c0-00b1c14eedd3",
                            TwoFactorEnabled = false,
                            UserName = "caterinatas"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ff24ce6-bd4c-4c65-a415-edc7bfba89b6",
                            Email = "edtouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ed",
                            LastName = "Touw",
                            LockoutEnabled = false,
                            Name = "Ed Touw",
                            NormalizedEmail = "edtouw@example.com",
                            NormalizedUserName = "edtouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEMskMLt6n4Z4VHhEQgzrt9rG83FGuPpO7lARu8Lud0pzhxJI/3i7SvXO2Ti4Zdp+ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf11ef7c-43de-478e-9bcc-8852fb28c0f6",
                            TwoFactorEnabled = false,
                            UserName = "edtouw"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01be97ac-2225-49b9-950c-c870350e25e4",
                            Email = "hugofidom@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hugo",
                            LastName = "Fidom",
                            LockoutEnabled = false,
                            Name = "Hugo Fidom",
                            NormalizedEmail = "hugofidom@example.com",
                            NormalizedUserName = "hugofidom",
                            PasswordHash = "AQAAAAEAACcQAAAAEHTjWx1K74pZG+SMHzH6w3ydBoPDyQlkh0lLWjDFh91YIuTx+F4HVstrFqzhDRRoRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ac71ad6-a24d-47c9-8501-da237c3076bd",
                            TwoFactorEnabled = false,
                            UserName = "hugofidom"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3293e36c-e50c-4021-b2ef-567a6c10e2ac",
                            Email = "nannebesseling@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nanne",
                            LastName = "Besseling",
                            LockoutEnabled = false,
                            Name = "Nanne Besseling",
                            NormalizedEmail = "nannebesseling@example.com",
                            NormalizedUserName = "nannebesseling",
                            PasswordHash = "AQAAAAEAACcQAAAAEE2dwpJzsJNDk47qXBgiuVNrbnDUANCAsLXwNlk9m384HQQm6/PqcThBh0hk3oU3Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6619102d-da64-4667-8262-74f596a385f1",
                            TwoFactorEnabled = false,
                            UserName = "nannebesseling"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "901f41f9-1d26-4185-93f6-0281f6b3b1af",
                            Email = "teunisjesalden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Teunisje",
                            LastName = "Salden",
                            LockoutEnabled = false,
                            Name = "Teunisje Salden",
                            NormalizedEmail = "teunisjesalden@example.com",
                            NormalizedUserName = "teunisjesalden",
                            PasswordHash = "AQAAAAEAACcQAAAAEBn8ACg3gmAwaz9FbVsElb3AgbPHAvQ1+2/3O59yC2qM4MdI+KnZCd7VwqY3vNHyZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1732a8e8-adca-4f71-a512-0230c8786982",
                            TwoFactorEnabled = false,
                            UserName = "teunisjesalden"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cd5dc5e-5fdf-4a1c-936b-ff301b437217",
                            Email = "rochedoornink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Roché",
                            LastName = "Doornink",
                            LockoutEnabled = false,
                            Name = "Roché Doornink",
                            NormalizedEmail = "rochedoornink@example.com",
                            NormalizedUserName = "rochedoornink",
                            PasswordHash = "AQAAAAEAACcQAAAAELAxI3voB2DPrU1vrkHeuKPzBAA8dgGxAgM7Dh+9tQ7VnrA4GRyuXJbBY5YjDoB8KA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de37a1e1-db30-4f07-ad29-0101bc61b94d",
                            TwoFactorEnabled = false,
                            UserName = "rochedoornink"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc955a06-4a36-404a-a383-aab936058d8b",
                            Email = "yuenboertien@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yuen",
                            LastName = "Boertien",
                            LockoutEnabled = false,
                            Name = "Yuen Boertien",
                            NormalizedEmail = "yuenboertien@example.com",
                            NormalizedUserName = "yuenboertien",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbnFx+UWJMpnSlixI51zjACPzsnJk7/imG+Ux82duZlnGy3VJdhedKP3FFXZAU/Ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd45f264-37b6-427c-9e80-0df042405bdc",
                            TwoFactorEnabled = false,
                            UserName = "yuenboertien"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cde4689-96b7-4d34-99b6-740fe92af847",
                            Email = "heinrichmook@example.com",
                            EmailConfirmed = false,
                            FirstName = "Heinrich",
                            LastName = "Mook",
                            LockoutEnabled = false,
                            Name = "Heinrich Mook",
                            NormalizedEmail = "heinrichmook@example.com",
                            NormalizedUserName = "heinrichmook",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUXkV6qg0xbp4Kbt5SHQWFoJ2KFwvQXqvqIyxhqu52fZKcKFxsPpGwN1KzRFAMKXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69e1ca09-dc0e-4943-b297-a173f3fb1707",
                            TwoFactorEnabled = false,
                            UserName = "heinrichmook"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcc9cfd-a841-4422-8f8a-eec6c8a4bdf7",
                            Email = "keriantonisse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Keri",
                            LastName = "Antonisse",
                            LockoutEnabled = false,
                            Name = "Keri Antonisse",
                            NormalizedEmail = "keriantonisse@example.com",
                            NormalizedUserName = "keriantonisse",
                            PasswordHash = "AQAAAAEAACcQAAAAEK58UqjIYt+eDEUFAeFRD3LDXFP6vHKoQyBS4OsTLy5nM3gOItRHI19iBZ7uomn+KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda7f5ff-a86f-463a-bd7f-3e1a7f8a9a89",
                            TwoFactorEnabled = false,
                            UserName = "keriantonisse"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7095b921-3a8d-4f2a-a2a3-6309f6569d5d",
                            Email = "beerrebergen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Beer",
                            LastName = "Rebergen",
                            LockoutEnabled = false,
                            Name = "Beer Rebergen",
                            NormalizedEmail = "beerrebergen@example.com",
                            NormalizedUserName = "beerrebergen",
                            PasswordHash = "AQAAAAEAACcQAAAAEA9Mv4djExsPwg+OeKkqt9ag1K9WoGdAd80BN48dbWbCUQ1nroXVj9F3161foCv5VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2b77bba-574f-4d7f-9e6a-00362a5e2c05",
                            TwoFactorEnabled = false,
                            UserName = "beerrebergen"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "718084e2-7cae-47c1-ac38-e197e3ba4bff",
                            Email = "kainvandergun@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaïn",
                            LastName = "Van der Gun",
                            LockoutEnabled = false,
                            Name = "Kaïn Van der Gun",
                            NormalizedEmail = "kainvandergun@example.com",
                            NormalizedUserName = "kainvandergun",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfhh9GXH3HHfeN6ZSeTCewrhI4F31c56hcVKLgUkz2BSvgeQ2wCCt+52T34gXEpfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52073ace-2ec4-475b-974e-d7f64d84471e",
                            TwoFactorEnabled = false,
                            UserName = "kainvandergun"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0afaff10-eef3-44bb-8f4b-bd6b4af8a51c",
                            Email = "marloeswesterdijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marloes",
                            LastName = "Westerdijk",
                            LockoutEnabled = false,
                            Name = "Marloes Westerdijk",
                            NormalizedEmail = "marloeswesterdijk@example.com",
                            NormalizedUserName = "marloeswesterdijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEIuQy6KE6LMxgw2FtT6j8hWubJWPkFfmH5vWzmo3lbKYXe/DGmaJtVlNs6SGzaZl5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b9ea6f4-bc3c-4f4b-ba4f-81202a6895b1",
                            TwoFactorEnabled = false,
                            UserName = "marloeswesterdijk"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b535de08-6253-4d39-b807-1e9b257fc413",
                            Email = "aurelieesajas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aurélie",
                            LastName = "Esajas",
                            LockoutEnabled = false,
                            Name = "Aurélie Esajas",
                            NormalizedEmail = "aurelieesajas@example.com",
                            NormalizedUserName = "aurelieesajas",
                            PasswordHash = "AQAAAAEAACcQAAAAEG5Wkp5EduE8eOdGxv2XDyPTMHzMsc8B3CwTPS97T5Hiz8HRyRoDI6azrqu7JMskaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ea51e72-55b6-4ce8-943c-0fe9faf992ec",
                            TwoFactorEnabled = false,
                            UserName = "aurelieesajas"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac24001d-6c10-4c0f-9f95-a69c363ea504",
                            Email = "gerlindenooijens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gerlinde",
                            LastName = "Nooijens",
                            LockoutEnabled = false,
                            Name = "Gerlinde Nooijens",
                            NormalizedEmail = "gerlindenooijens@example.com",
                            NormalizedUserName = "gerlindenooijens",
                            PasswordHash = "AQAAAAEAACcQAAAAEBtZA0Efam3RY2Fb9Uwrf9T7T7+/NLze8jDKnBSLXgpTuADcZFWRgXvb8EhHskI7yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2d7f46d-7598-4d84-8100-28b27fcd5845",
                            TwoFactorEnabled = false,
                            UserName = "gerlindenooijens"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16ee691e-9a93-422c-b1e4-41a7d29ea988",
                            Email = "summerbrinkhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Summer",
                            LastName = "Brinkhuis",
                            LockoutEnabled = false,
                            Name = "Summer Brinkhuis",
                            NormalizedEmail = "summerbrinkhuis@example.com",
                            NormalizedUserName = "summerbrinkhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCVOUyaqLgCaYv5S7bgDQKE56SicFD74i+/80/AP6mYtmuy0o/FGrXSLvQXqKJwBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22094e5b-9b68-48b6-a9ab-4dd1f1b80020",
                            TwoFactorEnabled = false,
                            UserName = "summerbrinkhuis"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79c1f6a1-c53d-48df-bb34-338af48c6c0e",
                            Email = "quirinavandusschoten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Quirina",
                            LastName = "Van Dusschoten",
                            LockoutEnabled = false,
                            Name = "Quirina Van Dusschoten",
                            NormalizedEmail = "quirinavandusschoten@example.com",
                            NormalizedUserName = "quirinavandusschoten",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNz06CO4SiIBfVm1REOYV8H1p6I190E+p/SJBbccjjB4p2hmxEV5Om3s8PU4Qr1BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61d91643-f71c-40a8-b1c6-07476065228b",
                            TwoFactorEnabled = false,
                            UserName = "quirinavandusschoten"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8620490f-2bef-4360-9b47-8cca9c26fa5d",
                            Email = "emmelienhandels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emmelien",
                            LastName = "Handels",
                            LockoutEnabled = false,
                            Name = "Emmelien Handels",
                            NormalizedEmail = "emmelienhandels@example.com",
                            NormalizedUserName = "emmelienhandels",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtfDX5xcCz8nV7pQpK3Nc2isglYFqdbjn90Ou5Ui9OFEKloNpoE99IVRiZI3yiRfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44b18537-7b2f-4633-ab4d-b23b8594ba58",
                            TwoFactorEnabled = false,
                            UserName = "emmelienhandels"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "971aab6b-d5eb-4b11-aeb2-f34f4e5b4a46",
                            Email = "wensleycurvers@example.com",
                            EmailConfirmed = false,
                            FirstName = "Wensley",
                            LastName = "Curvers",
                            LockoutEnabled = false,
                            Name = "Wensley Curvers",
                            NormalizedEmail = "wensleycurvers@example.com",
                            NormalizedUserName = "wensleycurvers",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFcmP+BOphX4wEdU6ednSwvK3ck5hfhxOsbc2Dd31WjOz+LVvVr3+tlWgZnC/+KfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b919a14-2d09-49de-917d-6bd2d1426f0e",
                            TwoFactorEnabled = false,
                            UserName = "wensleycurvers"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ebf3f26-667d-4b65-b21c-1ed808d536bf",
                            Email = "dawidvanaart@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dawid",
                            LastName = "Van Aart",
                            LockoutEnabled = false,
                            Name = "Dawid Van Aart",
                            NormalizedEmail = "dawidvanaart@example.com",
                            NormalizedUserName = "dawidvanaart",
                            PasswordHash = "AQAAAAEAACcQAAAAEE3Doj5bwa5Wljji6BC3EwcZJtY7df+QMGC4hl2EuxBSItPBB3PiZEIaGD5FRq+IcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94638b8c-ad7a-42b5-b9d7-9676dce39c96",
                            TwoFactorEnabled = false,
                            UserName = "dawidvanaart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "ac70acb1-0b5f-4df6-9436-363ebfa9936a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "07b0fb93-c5de-4b59-a408-9c5e56828ceb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "27045336-6a5f-482a-a53c-50cd62ca167a",
                            Name = "Studiebegeleider",
                            NormalizedName = "STUDIEBEGELEIDER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "1b67057e-b6c3-467b-bab4-eaf5cd1411ca",
                            Name = "Moduleverantwoordelijke",
                            NormalizedName = "MODULEVERANTWOORDELIJKE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "23",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "24",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "25",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "26",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "27",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "28",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "29",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "30",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "35",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "36",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "37",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "39",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "43",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
