// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230604135859_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 1,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 2,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 3,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edb8776b-32ec-4567-b94c-434ab8085d64",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            NormalizedEmail = "admin@example.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYxNoyeltI/AcqSJBon9IG8miAdH0TGCxK5E68Iht3Qu0mfYo0xUl9Dk627ZisUjQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bd2bc96-473c-4573-a1f2-68b0f13ae375",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            NormalizedEmail = "eugenevanroden@example.com",
                            NormalizedUserName = "eugenevanroden",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnhaMdn8qgEOHGm80Oc5tsr2ghaBp4qRmRsmIgAeZNTiFI+xJ6PaJHVB7MRzn5lPg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ebff824-757b-4226-a28b-a720507dd862",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            NormalizedEmail = "theotan@example.com",
                            NormalizedUserName = "theotan",
                            PasswordHash = "AQAAAAEAACcQAAAAECHU4RhndLa53UzG7/d+P7QCIy3RccGEnjFd9ngQNWsEHxkiW4FmHmv4kiUOcr3AwA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b59d6a43-d62b-4230-bc4d-6b967b32099a",
                            Email = "floruscicek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Florus",
                            LastName = "Çiçek",
                            LockoutEnabled = false,
                            Name = "Florus Çiçek",
                            NormalizedEmail = "floruscicek@example.com",
                            NormalizedUserName = "floruscicek",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvPu8hCZ5X8dFu5PT8dZ/VqlLw6dSlEig8vHgyHtkOJK+Bcurd2AWWdjD11oEcoWg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "floruscicek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b11d2a51-ff95-4a18-af59-d1635279133d",
                            Email = "marlenewolf@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlène",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            Name = "Marlène Wolf",
                            NormalizedEmail = "marlenewolf@example.com",
                            NormalizedUserName = "marlenewolf",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwVKemBy13/QYMuomBgQsUARYrlbguMNRezI62Xp4MRWRSCXgxHe2Vsjujfka+DTA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlenewolf"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec3e50e-2075-4f85-b48a-f2c09db6a6ea",
                            Email = "bilalsteentjes@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bilal",
                            LastName = "Steentjes",
                            LockoutEnabled = false,
                            Name = "Bilal Steentjes",
                            NormalizedEmail = "bilalsteentjes@example.com",
                            NormalizedUserName = "bilalsteentjes",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7wCVlYjsJZdBtZTqeebFYAK281LuvOClz70wtXPq5FazlHUfFba5fT2W9zOkVpoA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bilalsteentjes"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d77587d-e1ba-4662-a626-0927ce0856e5",
                            Email = "marlijngiebels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marlijn",
                            LastName = "Giebels",
                            LockoutEnabled = false,
                            Name = "Marlijn Giebels",
                            NormalizedEmail = "marlijngiebels@example.com",
                            NormalizedUserName = "marlijngiebels",
                            PasswordHash = "AQAAAAEAACcQAAAAEMpVsT63AN8r5YFgJFzOrRCi2exBi2ZgL2Fcg97Fe0lxmrnhvuDyFaAnzjciXuGiyA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marlijngiebels"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "973eb24b-a275-4725-9781-a8f258a48249",
                            Email = "sabrivandereijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabri",
                            LastName = "Van der Eijk",
                            LockoutEnabled = false,
                            Name = "Sabri Van der Eijk",
                            NormalizedEmail = "sabrivandereijk@example.com",
                            NormalizedUserName = "sabrivandereijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEHfYsh2U7nbXpDFNPjDhcjQX3ZwwQCRR84/RuBluub78p8muBPPfvge6TrqQAogtJg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabrivandereijk"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96701f08-5b7f-4694-821a-f04d60b17fb4",
                            Email = "caseyandriesse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Casey",
                            LastName = "Andriesse",
                            LockoutEnabled = false,
                            Name = "Casey Andriesse",
                            NormalizedEmail = "caseyandriesse@example.com",
                            NormalizedUserName = "caseyandriesse",
                            PasswordHash = "AQAAAAEAACcQAAAAELrGwMqQ82ufyvD6K0Tqn165XJS4AJeIE6Mo81iaHB7VqDDG35ITU3yb+1+TeUAucw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caseyandriesse"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52dab907-9991-4f95-a19f-8759da192770",
                            Email = "nikhuijskens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nik",
                            LastName = "Huijskens",
                            LockoutEnabled = false,
                            Name = "Nik Huijskens",
                            NormalizedEmail = "nikhuijskens@example.com",
                            NormalizedUserName = "nikhuijskens",
                            PasswordHash = "AQAAAAEAACcQAAAAELYUa3cu//4rS5rouOH6iLv1eZhZmchUdyLzf8qL77N9l8rCRK40+CNh9XyoYid9jQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nikhuijskens"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09dd994a-ebd6-42be-900a-6921d30ef92a",
                            Email = "duranpetiet@example.com",
                            EmailConfirmed = false,
                            FirstName = "Duran",
                            LastName = "Petiet",
                            LockoutEnabled = false,
                            Name = "Duran Petiet",
                            NormalizedEmail = "duranpetiet@example.com",
                            NormalizedUserName = "duranpetiet",
                            PasswordHash = "AQAAAAEAACcQAAAAEGtHDPrwwPOtWpgQJDZHWeGxTNPUGf4S1fW7UZv5AavNsMJH9d97j/87H501zazPtQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "duranpetiet"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e32b3495-f8c9-44fd-9cad-f0ad9bb2cd6c",
                            Email = "veroniekbravenboer@example.com",
                            EmailConfirmed = false,
                            FirstName = "Veroniek",
                            LastName = "Bravenboer",
                            LockoutEnabled = false,
                            Name = "Veroniek Bravenboer",
                            NormalizedEmail = "veroniekbravenboer@example.com",
                            NormalizedUserName = "veroniekbravenboer",
                            PasswordHash = "AQAAAAEAACcQAAAAELWINksI/Coa4hulpojs7H3xXYdgJKli4ZEPaKmFVc89Wr2MWwTqldNX0egZmufRdA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "veroniekbravenboer"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3b9d450-d5ec-4b74-8d17-f9e0cf063410",
                            Email = "kaynejagtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kayne",
                            LastName = "Jagtenberg",
                            LockoutEnabled = false,
                            Name = "Kayne Jagtenberg",
                            NormalizedEmail = "kaynejagtenberg@example.com",
                            NormalizedUserName = "kaynejagtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAEODZT1SpoPVu9KXGSsQRh9ws0IYtwEiCl3SdLQViS9Wsqs35xbaOzKeojoZnCHivvg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaynejagtenberg"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab53cf19-cd2e-4297-bdaa-7c37cbfe662b",
                            Email = "siebrigjeabdi@example.com",
                            EmailConfirmed = false,
                            FirstName = "Siebrigje",
                            LastName = "Abdi",
                            LockoutEnabled = false,
                            Name = "Siebrigje Abdi",
                            NormalizedEmail = "siebrigjeabdi@example.com",
                            NormalizedUserName = "siebrigjeabdi",
                            PasswordHash = "AQAAAAEAACcQAAAAEOE6bfuNJKRP8IP8EmsUNgNkT+tN90g3JOIr/zrUPxt48HFeJaXnLZrkPnAOihwQTg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siebrigjeabdi"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3889a9e-9340-40be-9736-d3d72c1ee228",
                            Email = "sterrelambert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sterre",
                            LastName = "Lambert",
                            LockoutEnabled = false,
                            Name = "Sterre Lambert",
                            NormalizedEmail = "sterrelambert@example.com",
                            NormalizedUserName = "sterrelambert",
                            PasswordHash = "AQAAAAEAACcQAAAAED2UeBeTSgn21Wv+zg23CX2yvz2fgE3C7QTIvs5nGwzuo42N4uEruBxT0ZjAyC8jfw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sterrelambert"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ebc696b-4752-41d1-a6e7-6a63421521c4",
                            Email = "milicavandergouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Milica",
                            LastName = "Van der Gouw",
                            LockoutEnabled = false,
                            Name = "Milica Van der Gouw",
                            NormalizedEmail = "milicavandergouw@example.com",
                            NormalizedUserName = "milicavandergouw",
                            PasswordHash = "AQAAAAEAACcQAAAAELMJt1ezdJJASHiREGuYVoKO/XrEp5lfS9Vpm0T71l7XEplF9hnYtHQ1DJ02Ln8NIQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "milicavandergouw"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01148ca5-740a-4069-bce6-3581f1e7e0fb",
                            Email = "yvonbrussaard@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yvon",
                            LastName = "Brussaard",
                            LockoutEnabled = false,
                            Name = "Yvon Brussaard",
                            NormalizedEmail = "yvonbrussaard@example.com",
                            NormalizedUserName = "yvonbrussaard",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTdPAVnvZI0+tI6m7+H6WNHMSW36PLBX+LMgDjx7EQI7O9+rXdNXAlgQwH8S3k6YA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yvonbrussaard"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0341137f-1ab8-479e-be3e-c311beb63219",
                            Email = "bodhidatema@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bodhi",
                            LastName = "Datema",
                            LockoutEnabled = false,
                            Name = "Bodhi Datema",
                            NormalizedEmail = "bodhidatema@example.com",
                            NormalizedUserName = "bodhidatema",
                            PasswordHash = "AQAAAAEAACcQAAAAEG+0NOXexP99SlTSCPo2l4feZrSzeNrweUFAzt43WNb3fnPm8ydAFwbyAXeXmuBA4Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "bodhidatema"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "542f2e02-879d-4766-af48-ca1ecdead311",
                            Email = "noachschutrups@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noach",
                            LastName = "Schutrups",
                            LockoutEnabled = false,
                            Name = "Noach Schutrups",
                            NormalizedEmail = "noachschutrups@example.com",
                            NormalizedUserName = "noachschutrups",
                            PasswordHash = "AQAAAAEAACcQAAAAEJMbQgp6WtTBSTvBSGyXf9YZK50Kdf1tBncKMJ8vBwADq1hc3KpfTq6fQCE0ws3QzA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noachschutrups"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "408e66d0-2732-462b-914c-5766a416dbe1",
                            Email = "ouassimbekking@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ouassim",
                            LastName = "Bekking",
                            LockoutEnabled = false,
                            Name = "Ouassim Bekking",
                            NormalizedEmail = "ouassimbekking@example.com",
                            NormalizedUserName = "ouassimbekking",
                            PasswordHash = "AQAAAAEAACcQAAAAEMduqBMkDlvRVUB2GCdxkeyjYZWYy4Lk2d4Mi8FX1T42ZfiZu+TsjRmX+8pgnWd8og==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ouassimbekking"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f39e8c66-adfd-4729-9590-b4c154366ea6",
                            Email = "noervanderkruit@example.com",
                            EmailConfirmed = false,
                            FirstName = "Noer",
                            LastName = "Van der Kruit",
                            LockoutEnabled = false,
                            Name = "Noer Van der Kruit",
                            NormalizedEmail = "noervanderkruit@example.com",
                            NormalizedUserName = "noervanderkruit",
                            PasswordHash = "AQAAAAEAACcQAAAAEIICTfzjZCfjKcF1jUV5Ad5RAJhVF4WzsMndZTIrRV5er0K9zr5ygwXVX/w3hE7H/g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "noervanderkruit"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4398bb28-81b2-450b-b961-a85011833b3b",
                            Email = "kaanvanmaarseveen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaan",
                            LastName = "Van Maarseveen",
                            LockoutEnabled = false,
                            Name = "Kaan Van Maarseveen",
                            NormalizedEmail = "kaanvanmaarseveen@example.com",
                            NormalizedUserName = "kaanvanmaarseveen",
                            PasswordHash = "AQAAAAEAACcQAAAAEO40jQdpDRjk5Lhuz2+lKU2aMITkcsc3MsshISf+K5MbbxL4tVxoLpoDIEI8cnaoWg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kaanvanmaarseveen"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f6eb0a0-fb3e-45c1-945d-49a93cda5e71",
                            Email = "owenkaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Owen",
                            LastName = "Kaal",
                            LockoutEnabled = false,
                            Name = "Owen Kaal",
                            NormalizedEmail = "owenkaal@example.com",
                            NormalizedUserName = "owenkaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEEhzoX2aKPQB9vDBmIROJwKopuDgycF5XzF0awJYyrCC1Cx/PstuX1HFmrLlY1f/Xg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "owenkaal"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd54c6a8-29f8-42ad-8f16-e322a5a49a9a",
                            Email = "paulinebah@example.com",
                            EmailConfirmed = false,
                            FirstName = "Pauline",
                            LastName = "Bah",
                            LockoutEnabled = false,
                            Name = "Pauline Bah",
                            NormalizedEmail = "paulinebah@example.com",
                            NormalizedUserName = "paulinebah",
                            PasswordHash = "AQAAAAEAACcQAAAAEB4faovNU9sGrmG9RFOt6qATI28TyjucAi11q1GEMksPSfvLicgVKnFg5hV7VKi4BQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "paulinebah"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3de6f3a7-4c4a-4407-8f79-59a0f82bdc40",
                            Email = "caterinatas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Caterina",
                            LastName = "Tas",
                            LockoutEnabled = false,
                            Name = "Caterina Tas",
                            NormalizedEmail = "caterinatas@example.com",
                            NormalizedUserName = "caterinatas",
                            PasswordHash = "AQAAAAEAACcQAAAAEBdBzSlucsytacL3v2hIVtuoT0UqNs2ZaMx+38zPpEF7Nf0I7O+9x9ijB5mN2G0TGQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "caterinatas"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a091dba6-2d6e-487e-ab86-df9dc059f3f1",
                            Email = "edtouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ed",
                            LastName = "Touw",
                            LockoutEnabled = false,
                            Name = "Ed Touw",
                            NormalizedEmail = "edtouw@example.com",
                            NormalizedUserName = "edtouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEIXkyUhf9mj8Vy8IrFTehzAFant9KuMYfi2HNaq8XF49jfBn637tqYbsHq+g6q4ZBg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "edtouw"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21fbb5af-c8f7-4cd7-81aa-2a66fe83351d",
                            Email = "hugofidom@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hugo",
                            LastName = "Fidom",
                            LockoutEnabled = false,
                            Name = "Hugo Fidom",
                            NormalizedEmail = "hugofidom@example.com",
                            NormalizedUserName = "hugofidom",
                            PasswordHash = "AQAAAAEAACcQAAAAEElmnXsa3tsd1zWjRkgEzp4qwMOKQYuGrc3yWnXYwc0wQl+aqPukXdJOSHdEtTALHw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "hugofidom"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f12e31b-6af1-4539-b612-d839f1adbec5",
                            Email = "nannebesseling@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nanne",
                            LastName = "Besseling",
                            LockoutEnabled = false,
                            Name = "Nanne Besseling",
                            NormalizedEmail = "nannebesseling@example.com",
                            NormalizedUserName = "nannebesseling",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBevRoIdJlygbEcc/No5QEG/kKyKoJlFAoJWyaV6Y6uNgjXis91+hdm6DyPWA9EwQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nannebesseling"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02471e25-447d-4d96-bb3c-352380ca2e10",
                            Email = "teunisjesalden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Teunisje",
                            LastName = "Salden",
                            LockoutEnabled = false,
                            Name = "Teunisje Salden",
                            NormalizedEmail = "teunisjesalden@example.com",
                            NormalizedUserName = "teunisjesalden",
                            PasswordHash = "AQAAAAEAACcQAAAAEM7rmz32rmszhkDoS10pCQijWij6ukUXDcAWqx4HFvQ42bN1HEgi3UmXpMp7QtC2Ng==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "teunisjesalden"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee401633-4c3e-4578-83d9-37468261a3c1",
                            Email = "rochedoornink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Roché",
                            LastName = "Doornink",
                            LockoutEnabled = false,
                            Name = "Roché Doornink",
                            NormalizedEmail = "rochedoornink@example.com",
                            NormalizedUserName = "rochedoornink",
                            PasswordHash = "AQAAAAEAACcQAAAAEIdic7gC9QWnEB24r9j0YwuORQcj1NOYqnQBAkTKVPU56bxd52i0/oeXcikUXXZ93w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rochedoornink"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5950b58-24a4-4a87-8de8-8c9ea147b71c",
                            Email = "yuenboertien@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yuen",
                            LastName = "Boertien",
                            LockoutEnabled = false,
                            Name = "Yuen Boertien",
                            NormalizedEmail = "yuenboertien@example.com",
                            NormalizedUserName = "yuenboertien",
                            PasswordHash = "AQAAAAEAACcQAAAAEPj3ocH7DTbS/exbLWEjzTnGj2E/UlfLAYAogZsH0DHVUxnVqkRzJsms1ochuab6Sg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yuenboertien"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5640e182-dc91-4be3-8511-f99fda0928e0",
                            Email = "heinrichmook@example.com",
                            EmailConfirmed = false,
                            FirstName = "Heinrich",
                            LastName = "Mook",
                            LockoutEnabled = false,
                            Name = "Heinrich Mook",
                            NormalizedEmail = "heinrichmook@example.com",
                            NormalizedUserName = "heinrichmook",
                            PasswordHash = "AQAAAAEAACcQAAAAECGsYUGGaSvwShyEcl+KHU3j5aRHe1YCDwJwgAYXUKiaNvsNn9Y4e9vbiLz1gEhSEg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "heinrichmook"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1c90e72-7ead-434a-8520-01c4d52fbc13",
                            Email = "keriantonisse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Keri",
                            LastName = "Antonisse",
                            LockoutEnabled = false,
                            Name = "Keri Antonisse",
                            NormalizedEmail = "keriantonisse@example.com",
                            NormalizedUserName = "keriantonisse",
                            PasswordHash = "AQAAAAEAACcQAAAAEDgmqrMxH6zYB6kbafyX4nRVBQV23q/D+TyUiA0lQ1yX/bIO6D3qi3SUV31GlIlPMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "keriantonisse"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5be38ed8-71b5-4917-848b-de8be2ed6ff0",
                            Email = "beerrebergen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Beer",
                            LastName = "Rebergen",
                            LockoutEnabled = false,
                            Name = "Beer Rebergen",
                            NormalizedEmail = "beerrebergen@example.com",
                            NormalizedUserName = "beerrebergen",
                            PasswordHash = "AQAAAAEAACcQAAAAEMFJp8TWPQsKEeyUp9Fd1OuloI7S+64e0aH6nrIe/X/Gf66C2b5ihkXLtz7lYDVbMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "beerrebergen"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "546e7fb2-9e77-4213-9028-39fda1c8b73b",
                            Email = "kainvandergun@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kaïn",
                            LastName = "Van der Gun",
                            LockoutEnabled = false,
                            Name = "Kaïn Van der Gun",
                            NormalizedEmail = "kainvandergun@example.com",
                            NormalizedUserName = "kainvandergun",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0y7fhiCrVM3Qdbxg195OwCKbvtanQO3L9WmxTHIYEpimPTE7dCcmjqreBU81WZcQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kainvandergun"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6aa64edd-7eef-414a-a047-9b8873ff2432",
                            Email = "marloeswesterdijk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Marloes",
                            LastName = "Westerdijk",
                            LockoutEnabled = false,
                            Name = "Marloes Westerdijk",
                            NormalizedEmail = "marloeswesterdijk@example.com",
                            NormalizedUserName = "marloeswesterdijk",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUFhSPqSB/+NPzb6SXeniv/M+LPVk1NKdLOOSLSbdGKUWXFODJz/aCtYq9O3yO+rw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "marloeswesterdijk"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "510309a0-61c5-45ef-85cc-70f018ec31d7",
                            Email = "aurelieesajas@example.com",
                            EmailConfirmed = false,
                            FirstName = "Aurélie",
                            LastName = "Esajas",
                            LockoutEnabled = false,
                            Name = "Aurélie Esajas",
                            NormalizedEmail = "aurelieesajas@example.com",
                            NormalizedUserName = "aurelieesajas",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqhI6/8ea1wK2scunvbgpFPW1HMERMVjjqP4c2b04ZDfvyv263xO/6sDWdvMnyM1g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aurelieesajas"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4e2c9e1-4a7d-4e62-8aa3-b7c88f655bff",
                            Email = "gerlindenooijens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Gerlinde",
                            LastName = "Nooijens",
                            LockoutEnabled = false,
                            Name = "Gerlinde Nooijens",
                            NormalizedEmail = "gerlindenooijens@example.com",
                            NormalizedUserName = "gerlindenooijens",
                            PasswordHash = "AQAAAAEAACcQAAAAEEuYdCioIIkxNxF6L/TtbLryL5atLetfjDZtmIrS20JujKXBmG1sBCrOvlqOKiKeyQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "gerlindenooijens"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9bdd98b-d702-4836-a654-a4276e1689e0",
                            Email = "summerbrinkhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Summer",
                            LastName = "Brinkhuis",
                            LockoutEnabled = false,
                            Name = "Summer Brinkhuis",
                            NormalizedEmail = "summerbrinkhuis@example.com",
                            NormalizedUserName = "summerbrinkhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7awf2HXLNA0XTwyBMbuDLT8TJDhHantPa9OHLSr1eMsRv+wvxUUNlzPeGcRqyDFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "summerbrinkhuis"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbd4e17c-34f6-4ddd-bc6e-1fe2de475be7",
                            Email = "quirinavandusschoten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Quirina",
                            LastName = "Van Dusschoten",
                            LockoutEnabled = false,
                            Name = "Quirina Van Dusschoten",
                            NormalizedEmail = "quirinavandusschoten@example.com",
                            NormalizedUserName = "quirinavandusschoten",
                            PasswordHash = "AQAAAAEAACcQAAAAEJuegb34cvmOQKJ3OLLji/tFEs2sUmrelY3vcMR1mmcSRZofba+WbwSmmpZt8pT6bg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "quirinavandusschoten"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04e91498-d24c-4ba1-a15d-44635a4312fe",
                            Email = "emmelienhandels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emmelien",
                            LastName = "Handels",
                            LockoutEnabled = false,
                            Name = "Emmelien Handels",
                            NormalizedEmail = "emmelienhandels@example.com",
                            NormalizedUserName = "emmelienhandels",
                            PasswordHash = "AQAAAAEAACcQAAAAEJhKaUwUINdDXfmzeFj7b1uiPA2VPZQ6WYf7pxzlTGkvnIiobABZYRT0FqY4mLpIyw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "emmelienhandels"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cde6781a-4424-4223-87fd-b2c20eeafaca",
                            Email = "wensleycurvers@example.com",
                            EmailConfirmed = false,
                            FirstName = "Wensley",
                            LastName = "Curvers",
                            LockoutEnabled = false,
                            Name = "Wensley Curvers",
                            NormalizedEmail = "wensleycurvers@example.com",
                            NormalizedUserName = "wensleycurvers",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPnmtZQBvh/A5UQoQjI5k2LTT58xkYnE0/hhPHF3JEPGH2ip8MtoHO5f9EchGbLjw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wensleycurvers"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc8987ec-d753-4649-bf6e-8d70c00a06f4",
                            Email = "dawidvanaart@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dawid",
                            LastName = "Van Aart",
                            LockoutEnabled = false,
                            Name = "Dawid Van Aart",
                            NormalizedEmail = "dawidvanaart@example.com",
                            NormalizedUserName = "dawidvanaart",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWC+124OJuJo1pG8iLcQC5YK04mA2O3TMBlqczkI4qA6s/nPErMrGQ/gDt70p4bNg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dawidvanaart"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "c27cb064-14ac-4110-b229-36e8f811f572",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "477afd7d-0c41-4b58-ad9e-b02457a4d229",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "b5f27048-a783-4bae-af36-232ce28e4571",
                            Name = "Studiebegeleider",
                            NormalizedName = "STUDIEBEGELEIDER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "fabb83c6-772e-444f-875c-abaf3fabc3f5",
                            Name = "Moduleverantwoordelijke",
                            NormalizedName = "MODULEVERANTWOORDELIJKE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "21",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "23",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "24",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "25",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "26",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "27",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "28",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "29",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "30",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "31",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "32",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "34",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "35",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "36",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "37",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "39",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "41",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "42",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "43",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
