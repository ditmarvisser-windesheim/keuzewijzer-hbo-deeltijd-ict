// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using keuzewijzer_hbo_deeltijd_ict_API.Dal;

#nullable disable

namespace keuzewijzer_hbo_deeltijd_ict_API.Migrations
{
    [DbContext(typeof(KeuzewijzerContext))]
    [Migration("20230604124458_userid-int-to-string")]
    partial class useridinttostring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.Property<int>("CohortsId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.HasKey("CohortsId", "SemesterItemsId");

                    b.HasIndex("SemesterItemsId");

                    b.ToTable("CohortSemesterItems", (string)null);

                    b.HasData(
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 1
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 2
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 3
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 4
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 5
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 6
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 7
                        },
                        new
                        {
                            CohortsId = 4,
                            SemesterItemsId = 8
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cohort 1",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cohort 2",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cohort 3",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cohort 4",
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ModuleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Module 1",
                            SemesterItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Module 2",
                            SemesterItemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Module 3",
                            SemesterItemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Module 4",
                            SemesterItemId = 4
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studiebegeleider"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moduleverantwoordelijke"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("YearJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Semester Item 1",
                            Name = "Semester Item 1",
                            Semester = 1,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Semester Item 2",
                            Name = "Semester Item 2",
                            Semester = 2,
                            YearJson = "[1]"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Semester Item 3",
                            Name = "Semester Item 3",
                            Semester = 1,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Semester Item 4",
                            Name = "Semester Item 4",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Semester Item 5",
                            Name = "Semester Item 5",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Semester Item 6",
                            Name = "Semester Item 6",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Semester Item 7",
                            Name = "Semester Item 7",
                            Semester = 2,
                            YearJson = "[2]"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Semester Item 8",
                            Name = "Semester Item 8",
                            Semester = 2,
                            YearJson = "[2]"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Approved_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved_sb")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Send_eb")
                        .HasColumnType("bit");

                    b.Property<bool>("Send_sb")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StudyRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved_eb = true,
                            Approved_sb = true,
                            Name = "Computer Science",
                            Note = "This is a note",
                            Send_eb = true,
                            Send_sb = true,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyRouteId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterItemId");

                    b.HasIndex("StudyRouteId");

                    b.ToTable("StudyRouteItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Semester = 1,
                            SemesterItemId = 1,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Semester = 1,
                            SemesterItemId = 2,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Semester = 1,
                            SemesterItemId = 3,
                            StudyRouteId = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Semester = 1,
                            SemesterItemId = 4,
                            StudyRouteId = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CohortId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimedOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CohortId1");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34f74915-085e-435b-b2ad-15cc7555a723",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Arnold",
                            LastName = "Min",
                            LockoutEnabled = false,
                            Name = "Arnold Dirk Min",
                            PasswordHash = "AQAAAAEAACcQAAAAEOKFjtMmnWAOQT3G0PWw0c725e2fMh1q5v6dOpY+ms9O65jW1iQVu7n89tSEFltDpQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc07f5ad-aa9a-4164-bb76-3833020d3f7a",
                            Email = "eugenevanroden@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eugene",
                            LastName = "Van Roden",
                            LockoutEnabled = false,
                            Name = "Eugene Van Roden",
                            PasswordHash = "AQAAAAEAACcQAAAAEOoeGeeiJh3EkrHEHCmhSmFXInQY/lENQj5SLkSgogxDD3Gss8FO4xheCKEuZWkf7w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "eugenevanroden@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75b51610-6b88-4140-86a3-b7a5e5edf710",
                            Email = "theotan@example.com",
                            EmailConfirmed = false,
                            FirstName = "Theo",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            Name = "Theo Tan",
                            PasswordHash = "AQAAAAEAACcQAAAAEMTCHWXYRWcyhddbyQa0WR42HiVnGMU95O8svs80nSR0Ne1N+nEh0cbsnQ67djW/7w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "theotan@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b44db12e-924e-4ce4-9d15-23f16b875777",
                            Email = "cloekras@example.com",
                            EmailConfirmed = false,
                            FirstName = "Cloé",
                            LastName = "Kras",
                            LockoutEnabled = false,
                            Name = "Cloé Kras",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKvltppGZR6SKBwyzy4JZgskmfjMGiDDTsu0igqTrV8+vCTkzvVYYKI98PtPCY5lQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "cloekras@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3608a167-ffb4-44f5-aa6a-6c4c1b296bd7",
                            Email = "maurivannuland@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mauri",
                            LastName = "Van Nuland",
                            LockoutEnabled = false,
                            Name = "Mauri Van Nuland",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNwQ063/ap65EITLLVff1sHfban/FoXwlQoGccA69UjPs6pwN690OndtfK8wTJD1A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "maurivannuland@example.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "659aa565-b319-4659-84ed-59171f9eddba",
                            Email = "jeromeheerink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jerome",
                            LastName = "Heerink",
                            LockoutEnabled = false,
                            Name = "Jerome Heerink",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhhx9d3WJIGf2aLCC/9TSkQrhoxNyU1+YUyfAgtlDcHifgOt2qsNXQuxvGZSxZSXA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeromeheerink@example.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60d0ddcd-8ff5-432b-9f30-17506c75b5fd",
                            Email = "semihvanburken@example.com",
                            EmailConfirmed = false,
                            FirstName = "Semih",
                            LastName = "Van Burken",
                            LockoutEnabled = false,
                            Name = "Semih Van Burken",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcv2MeffG3fxfdc6xxX+Y9W2v/jKSTr/RgDdMZDcDfyo/w3pibIQZu+54zyjH5cgA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "semihvanburken@example.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "919ed05f-052a-49b9-93d3-7303771c8888",
                            Email = "jacomijntjemoraal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jacomijntje",
                            LastName = "Moraal",
                            LockoutEnabled = false,
                            Name = "Jacomijntje Moraal",
                            PasswordHash = "AQAAAAEAACcQAAAAELg1sfl3RADbZDnPtUbzHm9yi5U9DVSk6tHk7dascU2W+I5/eUT6ksjMDUausxulTQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jacomijntjemoraal@example.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "679b105b-9e97-4745-b750-9ea8840ab232",
                            Email = "sjuulalma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sjuul",
                            LastName = "Alma",
                            LockoutEnabled = false,
                            Name = "Sjuul Alma",
                            PasswordHash = "AQAAAAEAACcQAAAAEGXjeE6wiTxaVFiZEEFvf8Rp6AzX+0iJ23va139MjfOw8gg6pLKuY6CHxwQ3D1Rygg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sjuulalma@example.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "987d8d41-10f8-4fb2-9c69-126b23c8c0ed",
                            Email = "sharonapouw@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sharona",
                            LastName = "Pouw",
                            LockoutEnabled = false,
                            Name = "Sharona Pouw",
                            PasswordHash = "AQAAAAEAACcQAAAAEMK51P4nkXMIf1801nqX9e3rJYfjaWhpBmd/W/k4erGZaF0r1+nQrrBRXbZ1VLHa5g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sharonapouw@example.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74c58617-20b6-4b99-88a2-e31a4526bf16",
                            Email = "ashwienabbenhuis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ashwien",
                            LastName = "Abbenhuis",
                            LockoutEnabled = false,
                            Name = "Ashwien Abbenhuis",
                            PasswordHash = "AQAAAAEAACcQAAAAEMFBiODinNdtxKQSLeoPJd0JSVuGxVavewjf46LLhOWk2xw7UkgloKpeul1bdt6uFg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ashwienabbenhuis@example.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55e1b057-fb61-49b9-965b-4659be6c49b7",
                            Email = "raulverdaasdonk@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raul",
                            LastName = "Verdaasdonk",
                            LockoutEnabled = false,
                            Name = "Raul Verdaasdonk",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7wM8bQKXI6cnIPNlvzzCqyA46WAxfnCp7HzxPov12cCNyTS/6bwT0f5MzvdCU8Bg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raulverdaasdonk@example.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df30de4f-f2a8-401a-b5a4-efecc76a5fce",
                            Email = "majellawessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Majella",
                            LastName = "Wessels",
                            LockoutEnabled = false,
                            Name = "Majella Wessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGvPxIlwG3Ujj4IR/VCGd8Z7OR8xx2VBePrvhVMbKj3m8MwRirrCrXre7RK/rqeLA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "majellawessels@example.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cba87bd3-4679-47ce-ab7c-77c45ca0569a",
                            Email = "kwintlogtenberg@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kwint",
                            LastName = "Logtenberg",
                            LockoutEnabled = false,
                            Name = "Kwint Logtenberg",
                            PasswordHash = "AQAAAAEAACcQAAAAELgH1Ul7sNrz+AoXyyDAo25skvq7s6v6EGPYIdP3K2EpbMLa2aX4PHWcjRto98aMXQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kwintlogtenberg@example.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9b269f8-5802-4bc1-a393-d55a546aeff7",
                            Email = "mikhaillebbink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mikhail",
                            LastName = "Lebbink",
                            LockoutEnabled = false,
                            Name = "Mikhail Lebbink",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBca1e692qMfSabi6pu5GTfe58sPSpJOQYXtJa+IkdC0UDEPoEDAZfkPCZR/QcEHw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mikhaillebbink@example.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17ccc633-e729-498c-a081-0d9b378b3138",
                            Email = "claylier@example.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Lier",
                            LockoutEnabled = false,
                            Name = "Clay Lier",
                            PasswordHash = "AQAAAAEAACcQAAAAEAwSIUyspodHvc6dngPMg0MvOFdDBWw31NvMAWhHQ6VO1pY2fiBKlP5EMIJpm/GVqA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "claylier@example.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77729202-2e7d-49ea-91c3-60846fe156e8",
                            Email = "rubinavanderhout@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rubina",
                            LastName = "Van der Hout",
                            LockoutEnabled = false,
                            Name = "Rubina Van der Hout",
                            PasswordHash = "AQAAAAEAACcQAAAAEMItH707nq5828bXYY/2fs/bHOPVg97wMOmnDT0q7Y+h71Gk0VBF/4ApR0qS/lDFmw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rubinavanderhout@example.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d865c7c-b5ea-4a02-b80e-a8782ccc9fe9",
                            Email = "abderrazakblaauwbroek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Abderrazak",
                            LastName = "Blaauwbroek",
                            LockoutEnabled = false,
                            Name = "Abderrazak Blaauwbroek",
                            PasswordHash = "AQAAAAEAACcQAAAAEHXMekMBYdMVZzWbeExcE27YU+QZPUsFHVA15sFhrezRG2+SL6kCMZysF/RRdcyDuA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "abderrazakblaauwbroek@example.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a81399e5-3511-4026-bdcf-6022d084dd83",
                            Email = "yannikconsten@example.com",
                            EmailConfirmed = false,
                            FirstName = "Yannik",
                            LastName = "Consten",
                            LockoutEnabled = false,
                            Name = "Yannik Consten",
                            PasswordHash = "AQAAAAEAACcQAAAAEPicOZ49jmaf0JlF0SndPLnB6YzUhBCaDp+QqAieG7u61FekHTTQuWmCb86lmv1pcA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "yannikconsten@example.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d3d4520-aeec-477c-9eb1-5981030c0658",
                            Email = "niniboekhoudt@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nini",
                            LastName = "Boekhoudt",
                            LockoutEnabled = false,
                            Name = "Nini Boekhoudt",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUwMMinxK/fLadPDh9Gs39OuyKbxbvt41YOeaA4Ew2CD5V7a4vkF1lQ7L/3CE3faA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "niniboekhoudt@example.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f2b9875-98fa-4c4a-ba60-0373417e224c",
                            Email = "mounssifborkent@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mounssif",
                            LastName = "Borkent",
                            LockoutEnabled = false,
                            Name = "Mounssif Borkent",
                            PasswordHash = "AQAAAAEAACcQAAAAELcdJbEmLd0D+OfywjpsSbdhVXlxWJpV4uy5NrKCnEBCWW1+4V8f6l/tduN3jjrDpA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mounssifborkent@example.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f75f540c-324a-45f2-a744-66ffbbd205bb",
                            Email = "metjeknoef@example.com",
                            EmailConfirmed = false,
                            FirstName = "Metje",
                            LastName = "Knoef",
                            LockoutEnabled = false,
                            Name = "Metje Knoef",
                            PasswordHash = "AQAAAAEAACcQAAAAEOVxTg1EHxffDOHnyFjhu2fZni+7vVkbIxQ8as/ABfiLrxAICR4+9QFzdTm5GD+WUg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "metjeknoef@example.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9c266f3-ea49-49f5-9e23-bbb7732aa35f",
                            Email = "lolkjehagoort@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lolkje",
                            LastName = "Hagoort",
                            LockoutEnabled = false,
                            Name = "Lolkje Hagoort",
                            PasswordHash = "AQAAAAEAACcQAAAAELWUUkFnOc+nz0VLU1HTEo+Uo5MwUZn8e81CbmmExmdgedpSj8knAkTYF+t/ckWewQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "lolkjehagoort@example.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6ed115c-2af8-4d29-b2e3-0c296d5e8487",
                            Email = "sabriadenissen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sabria",
                            LastName = "Denissen",
                            LockoutEnabled = false,
                            Name = "Sabria Denissen",
                            PasswordHash = "AQAAAAEAACcQAAAAECUTCyx0/UhNr436rtWNxhKOLlkju+DcNyPMQ7uWm3tumilSCr3SNmmyhIyvxspjDw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sabriadenissen@example.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e92a9bc4-22f7-48dd-9abd-adf7418c8b2a",
                            Email = "farukvanschip@example.com",
                            EmailConfirmed = false,
                            FirstName = "Faruk",
                            LastName = "Van Schip",
                            LockoutEnabled = false,
                            Name = "Faruk Van Schip",
                            PasswordHash = "AQAAAAEAACcQAAAAEPJfbaaqVxIL3MXXDkRQbxg2GWHgfBh0tfyco3tijf7dM7ykmjoq7Q0EsgjqCt6mqA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "farukvanschip@example.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5465fe69-a575-4e96-81d1-47a1878e2280",
                            Email = "zakariadraaisma@example.com",
                            EmailConfirmed = false,
                            FirstName = "Zakaria",
                            LastName = "Draaisma",
                            LockoutEnabled = false,
                            Name = "Zakaria Draaisma",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFvTeeO9lPC1i+/fxdyTCd7hihivxOpQGTokrha8bEzFlO/SirOoCz6UwDeaCWydQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "zakariadraaisma@example.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8cf8043-292f-4069-823d-9bf60b7da7e8",
                            Email = "oguzheessels@example.com",
                            EmailConfirmed = false,
                            FirstName = "Oguz",
                            LastName = "Heessels",
                            LockoutEnabled = false,
                            Name = "Oguz Heessels",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzv1UjWLOn5YMOJcTuRii6FhKXIB3FHO03iGBrcatSjZB+g00pj8yC+qcwcuBwEhg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "oguzheessels@example.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a9bbc6d-9f99-4939-a7f4-68a87023ea56",
                            Email = "mariaburggraaff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Burggraaff",
                            LockoutEnabled = false,
                            Name = "Maria Burggraaff",
                            PasswordHash = "AQAAAAEAACcQAAAAEF2HwvXJlDRqPeaTvQJOhIqJGHYlaxvxdK5XoXYXSV/ekOoK57a+21wN1vGJ4rGziA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mariaburggraaff@example.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d9b4ddd-5b8d-4d70-8a2c-b1119daba81f",
                            Email = "katelijnvandekoppel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Katelijn",
                            LastName = "Van de Koppel",
                            LockoutEnabled = false,
                            Name = "Katelijn Van de Koppel",
                            PasswordHash = "AQAAAAEAACcQAAAAEAv+WMfu4RJezQoiFQqb+09zd+kwgKkqun7MZGIjz5nibfqT9zUvBK/5evJBp/v21A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "katelijnvandekoppel@example.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fec5d88c-7073-4034-8999-6f913e1ab2c5",
                            Email = "desirescheeren@example.com",
                            EmailConfirmed = false,
                            FirstName = "Désiré",
                            LastName = "Scheeren",
                            LockoutEnabled = false,
                            Name = "Désiré Scheeren",
                            PasswordHash = "AQAAAAEAACcQAAAAECMC1IJvoR/IR980pFjETQnGg+wywKh9Sk/DCZgZHguyiG5W9jbxhVbKO7NOsQexSQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "desirescheeren@example.com"
                        },
                        new
                        {
                            Id = "31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31d540be-6781-46dd-ac9d-1fbcd3c79b74",
                            Email = "daxgabriel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Dax",
                            LastName = "Gabriel",
                            LockoutEnabled = false,
                            Name = "Dax Gabriel",
                            PasswordHash = "AQAAAAEAACcQAAAAEDb6I8LmxzHLEFUH0nzIHc5kfIRRGcxkDG1bhmW6ZprEa65uPdOXCgXeK7iISdnsUA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "daxgabriel@example.com"
                        },
                        new
                        {
                            Id = "32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9463d430-e7c0-4643-96cb-01e35f8e8d3d",
                            Email = "tommiestel@example.com",
                            EmailConfirmed = false,
                            FirstName = "Tommie",
                            LastName = "Stel",
                            LockoutEnabled = false,
                            Name = "Tommie Stel",
                            PasswordHash = "AQAAAAEAACcQAAAAEHoxldMqjgJ5mQHM3NcnXyF6nwUpfL1sYY53rZ6Zg6UhA935tRe1nKtFdKJc/uxZ/Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "tommiestel@example.com"
                        },
                        new
                        {
                            Id = "33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dae3efb7-0f2c-4421-b09b-3cfaa5fb53a4",
                            Email = "raphaelkoppe@example.com",
                            EmailConfirmed = false,
                            FirstName = "Raphaël",
                            LastName = "Koppe",
                            LockoutEnabled = false,
                            Name = "Raphaël Koppe",
                            PasswordHash = "AQAAAAEAACcQAAAAEIUG0/vHNadUJ65QnCy9LxL+qOBqpQTS6vmATn66umdEGloZkEJgmSFiiCs1CBK7EQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "raphaelkoppe@example.com"
                        },
                        new
                        {
                            Id = "34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59948d06-b10c-4125-b897-06e0ac05e117",
                            Email = "demyjongen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Demy",
                            LastName = "Jongen",
                            LockoutEnabled = false,
                            Name = "Demy Jongen",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAnAf1SazTDxvqxo1fL5i4+QZc2xbYBeG4V9C5AvnQCwAuLLTtrTSk/LK0dZzoeUw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demyjongen@example.com"
                        },
                        new
                        {
                            Id = "35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ecf7c72-1603-48e4-9540-b91b88b8b406",
                            Email = "leahharreman@example.com",
                            EmailConfirmed = false,
                            FirstName = "Leah",
                            LastName = "Harreman",
                            LockoutEnabled = false,
                            Name = "Leah Harreman",
                            PasswordHash = "AQAAAAEAACcQAAAAELk6EvTXjkDSsVdJY5PR7+ddEyzO1kuvigmRxA9aCBRy/r1CZxeaqPY/QC12YdtQIg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "leahharreman@example.com"
                        },
                        new
                        {
                            Id = "36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ea44cac-edf4-486b-909c-93f5f93b65ad",
                            Email = "idrisskorpershoek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Idriss",
                            LastName = "Korpershoek",
                            LockoutEnabled = false,
                            Name = "Idriss Korpershoek",
                            PasswordHash = "AQAAAAEAACcQAAAAEGawEZpcgfcczmx95MzdybfBv7d0zEqhu75F9UDKwBgwSmhTDOITYmEpcDOSR1RmGA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "idrisskorpershoek@example.com"
                        },
                        new
                        {
                            Id = "37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c04e22ed-f74b-4768-96a4-b519599b8bcb",
                            Email = "rashiedbleumink@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rashied",
                            LastName = "Bleumink",
                            LockoutEnabled = false,
                            Name = "Rashied Bleumink",
                            PasswordHash = "AQAAAAEAACcQAAAAEOIk0WgpkA23k8SgRctrxjZEvh1NlnbTClPqGo4uuTzbXDEZ9VtNWH7oFiaCQuRLFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rashiedbleumink@example.com"
                        },
                        new
                        {
                            Id = "38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccb1211e-b208-4bf0-99cf-b02d07b19f73",
                            Email = "siay@example.com",
                            EmailConfirmed = false,
                            FirstName = "Si",
                            LastName = "Ay",
                            LockoutEnabled = false,
                            Name = "Si Ay",
                            PasswordHash = "AQAAAAEAACcQAAAAEEAtqsq7pk54oah3EithjI0hYHczNSEKk35t/az9T63fO51wykelEh2lGb5Plb8VxQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "siay@example.com"
                        },
                        new
                        {
                            Id = "39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cba86010-d030-44ef-8085-a48b4b6efa81",
                            Email = "manolyalebens@example.com",
                            EmailConfirmed = false,
                            FirstName = "Manolya",
                            LastName = "Lebens",
                            LockoutEnabled = false,
                            Name = "Manolya Lebens",
                            PasswordHash = "AQAAAAEAACcQAAAAEF67EaT1F43Dakx5qMjXq7yV//MByDeT4Qs04VIuO87ULzRQLuSxi70NCNNvOhCsgQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manolyalebens@example.com"
                        },
                        new
                        {
                            Id = "40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98bd94d7-01e1-402a-b920-cd9a861c185a",
                            Email = "mateuszmachielsen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mateusz",
                            LastName = "Machielsen",
                            LockoutEnabled = false,
                            Name = "Mateusz Machielsen",
                            PasswordHash = "AQAAAAEAACcQAAAAEP8NZ9q8J0XxRf71FLjjpgViex5G8SnBRlMvrtkZsIoxBySuhBIYv0C+69ByG6xoqg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mateuszmachielsen@example.com"
                        },
                        new
                        {
                            Id = "41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f16d1ef-2d4c-49e9-aff7-c18f05fa1c9b",
                            Email = "douaavandepavert@example.com",
                            EmailConfirmed = false,
                            FirstName = "Douaa",
                            LastName = "Van de Pavert",
                            LockoutEnabled = false,
                            Name = "Douaa Van de Pavert",
                            PasswordHash = "AQAAAAEAACcQAAAAEAcoyJUXfNAlpqnZjmz06FonZKY2BMacfI1eF5bDzeliy/gUkcoNUhBigD7eW5YcZQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "douaavandepavert@example.com"
                        },
                        new
                        {
                            Id = "42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b69a67f8-1ddc-4f94-9610-26d24e8f872e",
                            Email = "kishanhoogkamp@example.com",
                            EmailConfirmed = false,
                            FirstName = "Kishan",
                            LastName = "Hoogkamp",
                            LockoutEnabled = false,
                            Name = "Kishan Hoogkamp",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfsoJxXxFnLIY2Tl85fJL9vRaoZ4W0SdkvrVHw/WXIW4AaO3IOuKLBPS4NIYBKZiQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kishanhoogkamp@example.com"
                        },
                        new
                        {
                            Id = "43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80288ca1-c7a2-4e0f-bb89-38eae9520b92",
                            Email = "harmjanversendaal@example.com",
                            EmailConfirmed = false,
                            FirstName = "Harmjan",
                            LastName = "Versendaal",
                            LockoutEnabled = false,
                            Name = "Harmjan Versendaal",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvfTz/IqjdveooTKcc61lfDXr5VKHtIcnF+NZYdhsbj/+0B3t/F9knqQtWij3CfmQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "harmjanversendaal@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "2"
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = "3"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "4"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "5"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "6"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "7"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "8"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "9"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "10"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "11"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "12"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "13"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "14"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "15"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "16"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "17"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "18"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "19"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "20"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "21"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "22"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "23"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "24"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "25"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "26"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "27"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "28"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "29"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "30"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "31"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "32"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "33"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "34"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "35"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "36"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "37"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "38"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "39"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "40"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "41"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "42"
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = "43"
                        });
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.Property<int>("DependentSemesterItemId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSemesterItemId")
                        .HasColumnType("int");

                    b.HasKey("DependentSemesterItemId", "RequiredSemesterItemId");

                    b.HasIndex("RequiredSemesterItemId");

                    b.ToTable("SemesterItemRelationships", (string)null);

                    b.HasData(
                        new
                        {
                            DependentSemesterItemId = 2,
                            RequiredSemesterItemId = 1
                        },
                        new
                        {
                            DependentSemesterItemId = 3,
                            RequiredSemesterItemId = 2
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 3
                        },
                        new
                        {
                            DependentSemesterItemId = 4,
                            RequiredSemesterItemId = 1
                        });
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.Property<int>("SemesterItemsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SemesterItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSemesterItems", (string)null);
                });

            modelBuilder.Entity("CohortSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", null)
                        .WithMany()
                        .HasForeignKey("CohortsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.Module", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterItem");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithOne("StudyRoute")
                        .HasForeignKey("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "UserId");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRouteItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", "SemesterItem")
                        .WithMany()
                        .HasForeignKey("SemesterItemId");

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", "StudyRoute")
                        .WithMany("StudyRouteItems")
                        .HasForeignKey("StudyRouteId");

                    b.Navigation("SemesterItem");

                    b.Navigation("StudyRoute");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId1");

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemSemesterItem", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("DependentSemesterItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("RequiredSemesterItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterItemUser", b =>
                {
                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", null)
                        .WithMany()
                        .HasForeignKey("SemesterItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keuzewijzer_hbo_deeltijd_ict_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.SemesterItem", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.StudyRoute", b =>
                {
                    b.Navigation("StudyRouteItems");
                });

            modelBuilder.Entity("keuzewijzer_hbo_deeltijd_ict_API.Models.User", b =>
                {
                    b.Navigation("StudyRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
